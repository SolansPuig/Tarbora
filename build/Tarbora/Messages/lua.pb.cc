// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lua.proto

#include "lua.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lua_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_KeyValue_lua_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UvMap_math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector_math_2eproto;
namespace LuaMessage {
class KeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValue> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  float float__;
  bool bool__;
  const ::MathMessage::Vector* vector_;
  const ::MathMessage::Quaternion* quaternion_;
  const ::MathMessage::UvMap* uv_;
  const ::MathMessage::Color* color_;
  const ::LuaMessage::List* list_;
} _KeyValue_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
  const ::LuaMessage::List* list_;
  const ::LuaMessage::KeyValue* value_;
} _Node_default_instance_;
class ListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<List> _instance;
} _List_default_instance_;
}  // namespace LuaMessage
static void InitDefaultsscc_info_KeyValue_lua_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LuaMessage::_KeyValue_default_instance_;
    new (ptr) ::LuaMessage::KeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::LuaMessage::_Node_default_instance_;
    new (ptr) ::LuaMessage::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::LuaMessage::_List_default_instance_;
    new (ptr) ::LuaMessage::List();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LuaMessage::KeyValue::InitAsDefaultInstance();
  ::LuaMessage::Node::InitAsDefaultInstance();
  ::LuaMessage::List::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_KeyValue_lua_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_KeyValue_lua_2eproto}, {
      &scc_info_Vector_math_2eproto.base,
      &scc_info_Quaternion_math_2eproto.base,
      &scc_info_UvMap_math_2eproto.base,
      &scc_info_Color_math_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lua_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lua_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lua_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lua_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LuaMessage::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::LuaMessage::KeyValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LuaMessage::KeyValue, key_),
  offsetof(::LuaMessage::KeyValueDefaultTypeInternal, string_),
  offsetof(::LuaMessage::KeyValueDefaultTypeInternal, float__),
  offsetof(::LuaMessage::KeyValueDefaultTypeInternal, bool__),
  offsetof(::LuaMessage::KeyValueDefaultTypeInternal, vector_),
  offsetof(::LuaMessage::KeyValueDefaultTypeInternal, quaternion_),
  offsetof(::LuaMessage::KeyValueDefaultTypeInternal, uv_),
  offsetof(::LuaMessage::KeyValueDefaultTypeInternal, color_),
  offsetof(::LuaMessage::KeyValueDefaultTypeInternal, list_),
  PROTOBUF_FIELD_OFFSET(::LuaMessage::KeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LuaMessage::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::LuaMessage::Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::LuaMessage::NodeDefaultTypeInternal, list_),
  offsetof(::LuaMessage::NodeDefaultTypeInternal, value_),
  PROTOBUF_FIELD_OFFSET(::LuaMessage::Node, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LuaMessage::List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LuaMessage::List, node_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LuaMessage::KeyValue)},
  { 15, -1, sizeof(::LuaMessage::Node)},
  { 23, -1, sizeof(::LuaMessage::List)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LuaMessage::_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LuaMessage::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LuaMessage::_List_default_instance_),
};

const char descriptor_table_protodef_lua_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tlua.proto\022\nLuaMessage\032\nmath.proto\"\222\002\n\010"
  "KeyValue\022\013\n\003key\030\001 \001(\t\022\020\n\006string\030\002 \001(\tH\000\022"
  "\017\n\005float\030\003 \001(\002H\000\022\016\n\004bool\030\004 \001(\010H\000\022%\n\006vect"
  "or\030\005 \001(\0132\023.MathMessage.VectorH\000\022-\n\nquate"
  "rnion\030\006 \001(\0132\027.MathMessage.QuaternionH\000\022 "
  "\n\002uv\030\007 \001(\0132\022.MathMessage.UvMapH\000\022#\n\005colo"
  "r\030\010 \001(\0132\022.MathMessage.ColorH\000\022 \n\004list\030\t "
  "\001(\0132\020.LuaMessage.ListH\000B\007\n\005value\"Z\n\004Node"
  "\022 \n\004list\030\001 \001(\0132\020.LuaMessage.ListH\000\022%\n\005va"
  "lue\030\002 \001(\0132\024.LuaMessage.KeyValueH\000B\t\n\007con"
  "tent\"&\n\004List\022\036\n\004node\030\001 \003(\0132\020.LuaMessage."
  "Nodeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lua_2eproto_deps[1] = {
  &::descriptor_table_math_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lua_2eproto_sccs[1] = {
  &scc_info_KeyValue_lua_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lua_2eproto_once;
static bool descriptor_table_lua_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lua_2eproto = {
  &descriptor_table_lua_2eproto_initialized, descriptor_table_protodef_lua_2eproto, "lua.proto", 452,
  &descriptor_table_lua_2eproto_once, descriptor_table_lua_2eproto_sccs, descriptor_table_lua_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_lua_2eproto::offsets,
  file_level_metadata_lua_2eproto, 3, file_level_enum_descriptors_lua_2eproto, file_level_service_descriptors_lua_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lua_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lua_2eproto), true);
namespace LuaMessage {

// ===================================================================

void KeyValue::InitAsDefaultInstance() {
  ::LuaMessage::_KeyValue_default_instance_.string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::LuaMessage::_KeyValue_default_instance_.float__ = 0;
  ::LuaMessage::_KeyValue_default_instance_.bool__ = false;
  ::LuaMessage::_KeyValue_default_instance_.vector_ = const_cast< ::MathMessage::Vector*>(
      ::MathMessage::Vector::internal_default_instance());
  ::LuaMessage::_KeyValue_default_instance_.quaternion_ = const_cast< ::MathMessage::Quaternion*>(
      ::MathMessage::Quaternion::internal_default_instance());
  ::LuaMessage::_KeyValue_default_instance_.uv_ = const_cast< ::MathMessage::UvMap*>(
      ::MathMessage::UvMap::internal_default_instance());
  ::LuaMessage::_KeyValue_default_instance_.color_ = const_cast< ::MathMessage::Color*>(
      ::MathMessage::Color::internal_default_instance());
  ::LuaMessage::_KeyValue_default_instance_.list_ = const_cast< ::LuaMessage::List*>(
      ::LuaMessage::List::internal_default_instance());
}
class KeyValue::_Internal {
 public:
  static const ::MathMessage::Vector& vector(const KeyValue* msg);
  static const ::MathMessage::Quaternion& quaternion(const KeyValue* msg);
  static const ::MathMessage::UvMap& uv(const KeyValue* msg);
  static const ::MathMessage::Color& color(const KeyValue* msg);
  static const ::LuaMessage::List& list(const KeyValue* msg);
};

const ::MathMessage::Vector&
KeyValue::_Internal::vector(const KeyValue* msg) {
  return *msg->value_.vector_;
}
const ::MathMessage::Quaternion&
KeyValue::_Internal::quaternion(const KeyValue* msg) {
  return *msg->value_.quaternion_;
}
const ::MathMessage::UvMap&
KeyValue::_Internal::uv(const KeyValue* msg) {
  return *msg->value_.uv_;
}
const ::MathMessage::Color&
KeyValue::_Internal::color(const KeyValue* msg) {
  return *msg->value_.color_;
}
const ::LuaMessage::List&
KeyValue::_Internal::list(const KeyValue* msg) {
  return *msg->value_.list_;
}
void KeyValue::set_allocated_vector(::MathMessage::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    set_has_vector();
    value_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:LuaMessage.KeyValue.vector)
}
void KeyValue::clear_vector() {
  if (_internal_has_vector()) {
    delete value_.vector_;
    clear_has_value();
  }
}
void KeyValue::set_allocated_quaternion(::MathMessage::Quaternion* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    set_has_quaternion();
    value_.quaternion_ = quaternion;
  }
  // @@protoc_insertion_point(field_set_allocated:LuaMessage.KeyValue.quaternion)
}
void KeyValue::clear_quaternion() {
  if (_internal_has_quaternion()) {
    delete value_.quaternion_;
    clear_has_value();
  }
}
void KeyValue::set_allocated_uv(::MathMessage::UvMap* uv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (uv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uv, submessage_arena);
    }
    set_has_uv();
    value_.uv_ = uv;
  }
  // @@protoc_insertion_point(field_set_allocated:LuaMessage.KeyValue.uv)
}
void KeyValue::clear_uv() {
  if (_internal_has_uv()) {
    delete value_.uv_;
    clear_has_value();
  }
}
void KeyValue::set_allocated_color(::MathMessage::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    set_has_color();
    value_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:LuaMessage.KeyValue.color)
}
void KeyValue::clear_color() {
  if (_internal_has_color()) {
    delete value_.color_;
    clear_has_value();
  }
}
void KeyValue::set_allocated_list(::LuaMessage::List* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    value_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:LuaMessage.KeyValue.list)
}
KeyValue::KeyValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LuaMessage.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kVector: {
      _internal_mutable_vector()->::MathMessage::Vector::MergeFrom(from._internal_vector());
      break;
    }
    case kQuaternion: {
      _internal_mutable_quaternion()->::MathMessage::Quaternion::MergeFrom(from._internal_quaternion());
      break;
    }
    case kUv: {
      _internal_mutable_uv()->::MathMessage::UvMap::MergeFrom(from._internal_uv());
      break;
    }
    case kColor: {
      _internal_mutable_color()->::MathMessage::Color::MergeFrom(from._internal_color());
      break;
    }
    case kList: {
      _internal_mutable_list()->::LuaMessage::List::MergeFrom(from._internal_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LuaMessage.KeyValue)
}

void KeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValue_lua_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:LuaMessage.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValue& KeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValue_lua_2eproto.base);
  return *internal_default_instance();
}


void KeyValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:LuaMessage.KeyValue)
  switch (value_case()) {
    case kString: {
      value_.string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kVector: {
      delete value_.vector_;
      break;
    }
    case kQuaternion: {
      delete value_.quaternion_;
      break;
    }
    case kUv: {
      delete value_.uv_;
      break;
    }
    case kColor: {
      delete value_.color_;
      break;
    }
    case kList: {
      delete value_.list_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:LuaMessage.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_value();
  _internal_metadata_.Clear();
}

const char* KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LuaMessage.KeyValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LuaMessage.KeyValue.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_float_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MathMessage.Vector vector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MathMessage.Quaternion quaternion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MathMessage.UvMap uv = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_uv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MathMessage.Color color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LuaMessage.List list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LuaMessage.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LuaMessage.KeyValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string string = 2;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LuaMessage.KeyValue.string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_string(), target);
  }

  // float float = 3;
  if (_internal_has_float_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_float_(), target);
  }

  // bool bool = 4;
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_(), target);
  }

  // .MathMessage.Vector vector = 5;
  if (_internal_has_vector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::vector(this), target, stream);
  }

  // .MathMessage.Quaternion quaternion = 6;
  if (_internal_has_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::quaternion(this), target, stream);
  }

  // .MathMessage.UvMap uv = 7;
  if (_internal_has_uv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::uv(this), target, stream);
  }

  // .MathMessage.Color color = 8;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::color(this), target, stream);
  }

  // .LuaMessage.List list = 9;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LuaMessage.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LuaMessage.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  switch (value_case()) {
    // string string = 2;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // float float = 3;
    case kFloat: {
      total_size += 1 + 4;
      break;
    }
    // bool bool = 4;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // .MathMessage.Vector vector = 5;
    case kVector: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.vector_);
      break;
    }
    // .MathMessage.Quaternion quaternion = 6;
    case kQuaternion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.quaternion_);
      break;
    }
    // .MathMessage.UvMap uv = 7;
    case kUv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.uv_);
      break;
    }
    // .MathMessage.Color color = 8;
    case kColor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.color_);
      break;
    }
    // .LuaMessage.List list = 9;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.list_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LuaMessage.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LuaMessage.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LuaMessage.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LuaMessage.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  switch (from.value_case()) {
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kVector: {
      _internal_mutable_vector()->::MathMessage::Vector::MergeFrom(from._internal_vector());
      break;
    }
    case kQuaternion: {
      _internal_mutable_quaternion()->::MathMessage::Quaternion::MergeFrom(from._internal_quaternion());
      break;
    }
    case kUv: {
      _internal_mutable_uv()->::MathMessage::UvMap::MergeFrom(from._internal_uv());
      break;
    }
    case kColor: {
      _internal_mutable_color()->::MathMessage::Color::MergeFrom(from._internal_color());
      break;
    }
    case kList: {
      _internal_mutable_list()->::LuaMessage::List::MergeFrom(from._internal_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LuaMessage.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LuaMessage.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::LuaMessage::_Node_default_instance_.list_ = const_cast< ::LuaMessage::List*>(
      ::LuaMessage::List::internal_default_instance());
  ::LuaMessage::_Node_default_instance_.value_ = const_cast< ::LuaMessage::KeyValue*>(
      ::LuaMessage::KeyValue::internal_default_instance());
}
class Node::_Internal {
 public:
  static const ::LuaMessage::List& list(const Node* msg);
  static const ::LuaMessage::KeyValue& value(const Node* msg);
};

const ::LuaMessage::List&
Node::_Internal::list(const Node* msg) {
  return *msg->content_.list_;
}
const ::LuaMessage::KeyValue&
Node::_Internal::value(const Node* msg) {
  return *msg->content_.value_;
}
void Node::set_allocated_list(::LuaMessage::List* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    content_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:LuaMessage.Node.list)
}
void Node::set_allocated_value(::LuaMessage::KeyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
    content_.value_ = value;
  }
  // @@protoc_insertion_point(field_set_allocated:LuaMessage.Node.value)
}
Node::Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LuaMessage.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kList: {
      _internal_mutable_list()->::LuaMessage::List::MergeFrom(from._internal_list());
      break;
    }
    case kValue: {
      _internal_mutable_value()->::LuaMessage::KeyValue::MergeFrom(from._internal_value());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LuaMessage.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValue_lua_2eproto.base);
  clear_has_content();
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:LuaMessage.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValue_lua_2eproto.base);
  return *internal_default_instance();
}


void Node::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:LuaMessage.Node)
  switch (content_case()) {
    case kList: {
      delete content_.list_;
      break;
    }
    case kValue: {
      delete content_.value_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:LuaMessage.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LuaMessage.List list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LuaMessage.KeyValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LuaMessage.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LuaMessage.List list = 1;
  if (_internal_has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::list(this), target, stream);
  }

  // .LuaMessage.KeyValue value = 2;
  if (_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LuaMessage.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LuaMessage.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .LuaMessage.List list = 1;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.list_);
      break;
    }
    // .LuaMessage.KeyValue value = 2;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.value_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LuaMessage.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LuaMessage.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LuaMessage.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LuaMessage.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kList: {
      _internal_mutable_list()->::LuaMessage::List::MergeFrom(from._internal_list());
      break;
    }
    case kValue: {
      _internal_mutable_value()->::LuaMessage::KeyValue::MergeFrom(from._internal_value());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LuaMessage.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LuaMessage.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void List::InitAsDefaultInstance() {
}
class List::_Internal {
 public:
};

List::List()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LuaMessage.List)
}
List::List(const List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_(from.node_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LuaMessage.List)
}

void List::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValue_lua_2eproto.base);
}

List::~List() {
  // @@protoc_insertion_point(destructor:LuaMessage.List)
  SharedDtor();
}

void List::SharedDtor() {
}

void List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const List& List::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValue_lua_2eproto.base);
  return *internal_default_instance();
}


void List::Clear() {
// @@protoc_insertion_point(message_clear_start:LuaMessage.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  _internal_metadata_.Clear();
}

const char* List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LuaMessage.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* List::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LuaMessage.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LuaMessage.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LuaMessage.List)
  return target;
}

size_t List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LuaMessage.List)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LuaMessage.Node node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LuaMessage.List)
  GOOGLE_DCHECK_NE(&from, this);
  const List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LuaMessage.List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LuaMessage.List)
    MergeFrom(*source);
  }
}

void List::MergeFrom(const List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LuaMessage.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
}

void List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LuaMessage.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void List::CopyFrom(const List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LuaMessage.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List::IsInitialized() const {
  return true;
}

void List::InternalSwap(List* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata List::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LuaMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LuaMessage::KeyValue* Arena::CreateMaybeMessage< ::LuaMessage::KeyValue >(Arena* arena) {
  return Arena::CreateInternal< ::LuaMessage::KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::LuaMessage::Node* Arena::CreateMaybeMessage< ::LuaMessage::Node >(Arena* arena) {
  return Arena::CreateInternal< ::LuaMessage::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::LuaMessage::List* Arena::CreateMaybeMessage< ::LuaMessage::List >(Arena* arena) {
  return Arena::CreateInternal< ::LuaMessage::List >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
