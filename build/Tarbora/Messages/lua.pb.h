// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lua.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lua_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lua_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lua_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lua_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lua_2eproto;
namespace LuaMessage {
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class List;
class ListDefaultTypeInternal;
extern ListDefaultTypeInternal _List_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace LuaMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::LuaMessage::KeyValue* Arena::CreateMaybeMessage<::LuaMessage::KeyValue>(Arena*);
template<> ::LuaMessage::List* Arena::CreateMaybeMessage<::LuaMessage::List>(Arena*);
template<> ::LuaMessage::Node* Arena::CreateMaybeMessage<::LuaMessage::Node>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LuaMessage {

// ===================================================================

class KeyValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LuaMessage.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  enum ValueCase {
    kString = 2,
    kFloat = 3,
    kBool = 4,
    kVector = 5,
    kQuaternion = 6,
    kUv = 7,
    kColor = 8,
    kList = 9,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LuaMessage.KeyValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lua_2eproto);
    return ::descriptor_table_lua_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kStringFieldNumber = 2,
    kFloatFieldNumber = 3,
    kBoolFieldNumber = 4,
    kVectorFieldNumber = 5,
    kQuaternionFieldNumber = 6,
    kUvFieldNumber = 7,
    kColorFieldNumber = 8,
    kListFieldNumber = 9,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string string = 2;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // float float = 3;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // bool bool = 4;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // .MathMessage.Vector vector = 5;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::MathMessage::Vector& vector() const;
  ::MathMessage::Vector* release_vector();
  ::MathMessage::Vector* mutable_vector();
  void set_allocated_vector(::MathMessage::Vector* vector);
  private:
  const ::MathMessage::Vector& _internal_vector() const;
  ::MathMessage::Vector* _internal_mutable_vector();
  public:

  // .MathMessage.Quaternion quaternion = 6;
  bool has_quaternion() const;
  private:
  bool _internal_has_quaternion() const;
  public:
  void clear_quaternion();
  const ::MathMessage::Quaternion& quaternion() const;
  ::MathMessage::Quaternion* release_quaternion();
  ::MathMessage::Quaternion* mutable_quaternion();
  void set_allocated_quaternion(::MathMessage::Quaternion* quaternion);
  private:
  const ::MathMessage::Quaternion& _internal_quaternion() const;
  ::MathMessage::Quaternion* _internal_mutable_quaternion();
  public:

  // .MathMessage.UvMap uv = 7;
  bool has_uv() const;
  private:
  bool _internal_has_uv() const;
  public:
  void clear_uv();
  const ::MathMessage::UvMap& uv() const;
  ::MathMessage::UvMap* release_uv();
  ::MathMessage::UvMap* mutable_uv();
  void set_allocated_uv(::MathMessage::UvMap* uv);
  private:
  const ::MathMessage::UvMap& _internal_uv() const;
  ::MathMessage::UvMap* _internal_mutable_uv();
  public:

  // .MathMessage.Color color = 8;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::MathMessage::Color& color() const;
  ::MathMessage::Color* release_color();
  ::MathMessage::Color* mutable_color();
  void set_allocated_color(::MathMessage::Color* color);
  private:
  const ::MathMessage::Color& _internal_color() const;
  ::MathMessage::Color* _internal_mutable_color();
  public:

  // .LuaMessage.List list = 9;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::LuaMessage::List& list() const;
  ::LuaMessage::List* release_list();
  ::LuaMessage::List* mutable_list();
  void set_allocated_list(::LuaMessage::List* list);
  private:
  const ::LuaMessage::List& _internal_list() const;
  ::LuaMessage::List* _internal_mutable_list();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:LuaMessage.KeyValue)
 private:
  class _Internal;
  void set_has_string();
  void set_has_float_();
  void set_has_bool_();
  void set_has_vector();
  void set_has_quaternion();
  void set_has_uv();
  void set_has_color();
  void set_has_list();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    float float__;
    bool bool__;
    ::MathMessage::Vector* vector_;
    ::MathMessage::Quaternion* quaternion_;
    ::MathMessage::UvMap* uv_;
    ::MathMessage::Color* color_;
    ::LuaMessage::List* list_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_lua_2eproto;
};
// -------------------------------------------------------------------

class Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LuaMessage.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  enum ContentCase {
    kList = 1,
    kValue = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LuaMessage.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lua_2eproto);
    return ::descriptor_table_lua_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .LuaMessage.List list = 1;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::LuaMessage::List& list() const;
  ::LuaMessage::List* release_list();
  ::LuaMessage::List* mutable_list();
  void set_allocated_list(::LuaMessage::List* list);
  private:
  const ::LuaMessage::List& _internal_list() const;
  ::LuaMessage::List* _internal_mutable_list();
  public:

  // .LuaMessage.KeyValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::LuaMessage::KeyValue& value() const;
  ::LuaMessage::KeyValue* release_value();
  ::LuaMessage::KeyValue* mutable_value();
  void set_allocated_value(::LuaMessage::KeyValue* value);
  private:
  const ::LuaMessage::KeyValue& _internal_value() const;
  ::LuaMessage::KeyValue* _internal_mutable_value();
  public:

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:LuaMessage.Node)
 private:
  class _Internal;
  void set_has_list();
  void set_has_value();

  inline bool has_content() const;
  inline void clear_has_content();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ContentUnion {
    ContentUnion() {}
    ::LuaMessage::List* list_;
    ::LuaMessage::KeyValue* value_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_lua_2eproto;
};
// -------------------------------------------------------------------

class List :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LuaMessage.List) */ {
 public:
  List();
  virtual ~List();

  List(const List& from);
  List(List&& from) noexcept
    : List() {
    *this = ::std::move(from);
  }

  inline List& operator=(const List& from) {
    CopyFrom(from);
    return *this;
  }
  inline List& operator=(List&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const List& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const List* internal_default_instance() {
    return reinterpret_cast<const List*>(
               &_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(List& a, List& b) {
    a.Swap(&b);
  }
  inline void Swap(List* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline List* New() const final {
    return CreateMaybeMessage<List>(nullptr);
  }

  List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<List>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const List& from);
  void MergeFrom(const List& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(List* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LuaMessage.List";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lua_2eproto);
    return ::descriptor_table_lua_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // repeated .LuaMessage.Node node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::LuaMessage::Node* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LuaMessage::Node >*
      mutable_node();
  private:
  const ::LuaMessage::Node& _internal_node(int index) const;
  ::LuaMessage::Node* _internal_add_node();
  public:
  const ::LuaMessage::Node& node(int index) const;
  ::LuaMessage::Node* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LuaMessage::Node >&
      node() const;

  // @@protoc_insertion_point(class_scope:LuaMessage.List)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LuaMessage::Node > node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lua_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValue

// string key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:LuaMessage.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:LuaMessage.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:LuaMessage.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.GetNoArena();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LuaMessage.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LuaMessage.KeyValue.key)
}
inline void KeyValue::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LuaMessage.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:LuaMessage.KeyValue.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:LuaMessage.KeyValue.key)
}

// string string = 2;
inline bool KeyValue::_internal_has_string() const {
  return value_case() == kString;
}
inline void KeyValue::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void KeyValue::clear_string() {
  if (_internal_has_string()) {
    value_.string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& KeyValue::string() const {
  // @@protoc_insertion_point(field_get:LuaMessage.KeyValue.string)
  return _internal_string();
}
inline void KeyValue::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:LuaMessage.KeyValue.string)
}
inline std::string* KeyValue::mutable_string() {
  // @@protoc_insertion_point(field_mutable:LuaMessage.KeyValue.string)
  return _internal_mutable_string();
}
inline const std::string& KeyValue::_internal_string() const {
  if (_internal_has_string()) {
    return value_.string_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KeyValue::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyValue::set_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:LuaMessage.KeyValue.string)
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LuaMessage.KeyValue.string)
}
inline void KeyValue::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LuaMessage.KeyValue.string)
}
inline void KeyValue::set_string(const char* value, size_t size) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LuaMessage.KeyValue.string)
}
inline std::string* KeyValue::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_string() {
  // @@protoc_insertion_point(field_release:LuaMessage.KeyValue.string)
  if (_internal_has_string()) {
    clear_has_value();
    return value_.string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void KeyValue::set_allocated_string(std::string* string) {
  if (has_value()) {
    clear_value();
  }
  if (string != nullptr) {
    set_has_string();
    value_.string_.UnsafeSetDefault(string);
  }
  // @@protoc_insertion_point(field_set_allocated:LuaMessage.KeyValue.string)
}

// float float = 3;
inline bool KeyValue::_internal_has_float_() const {
  return value_case() == kFloat;
}
inline void KeyValue::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void KeyValue::clear_float_() {
  if (_internal_has_float_()) {
    value_.float__ = 0;
    clear_has_value();
  }
}
inline float KeyValue::_internal_float_() const {
  if (_internal_has_float_()) {
    return value_.float__;
  }
  return 0;
}
inline void KeyValue::_internal_set_float_(float value) {
  if (!_internal_has_float_()) {
    clear_value();
    set_has_float_();
  }
  value_.float__ = value;
}
inline float KeyValue::float_() const {
  // @@protoc_insertion_point(field_get:LuaMessage.KeyValue.float)
  return _internal_float_();
}
inline void KeyValue::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:LuaMessage.KeyValue.float)
}

// bool bool = 4;
inline bool KeyValue::_internal_has_bool_() const {
  return value_case() == kBool;
}
inline void KeyValue::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void KeyValue::clear_bool_() {
  if (_internal_has_bool_()) {
    value_.bool__ = false;
    clear_has_value();
  }
}
inline bool KeyValue::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return value_.bool__;
  }
  return false;
}
inline void KeyValue::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_value();
    set_has_bool_();
  }
  value_.bool__ = value;
}
inline bool KeyValue::bool_() const {
  // @@protoc_insertion_point(field_get:LuaMessage.KeyValue.bool)
  return _internal_bool_();
}
inline void KeyValue::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:LuaMessage.KeyValue.bool)
}

// .MathMessage.Vector vector = 5;
inline bool KeyValue::_internal_has_vector() const {
  return value_case() == kVector;
}
inline bool KeyValue::has_vector() const {
  return _internal_has_vector();
}
inline void KeyValue::set_has_vector() {
  _oneof_case_[0] = kVector;
}
inline ::MathMessage::Vector* KeyValue::release_vector() {
  // @@protoc_insertion_point(field_release:LuaMessage.KeyValue.vector)
  if (_internal_has_vector()) {
    clear_has_value();
      ::MathMessage::Vector* temp = value_.vector_;
    value_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MathMessage::Vector& KeyValue::_internal_vector() const {
  return _internal_has_vector()
      ? *value_.vector_
      : *reinterpret_cast< ::MathMessage::Vector*>(&::MathMessage::_Vector_default_instance_);
}
inline const ::MathMessage::Vector& KeyValue::vector() const {
  // @@protoc_insertion_point(field_get:LuaMessage.KeyValue.vector)
  return _internal_vector();
}
inline ::MathMessage::Vector* KeyValue::_internal_mutable_vector() {
  if (!_internal_has_vector()) {
    clear_value();
    set_has_vector();
    value_.vector_ = CreateMaybeMessage< ::MathMessage::Vector >(
        GetArenaNoVirtual());
  }
  return value_.vector_;
}
inline ::MathMessage::Vector* KeyValue::mutable_vector() {
  // @@protoc_insertion_point(field_mutable:LuaMessage.KeyValue.vector)
  return _internal_mutable_vector();
}

// .MathMessage.Quaternion quaternion = 6;
inline bool KeyValue::_internal_has_quaternion() const {
  return value_case() == kQuaternion;
}
inline bool KeyValue::has_quaternion() const {
  return _internal_has_quaternion();
}
inline void KeyValue::set_has_quaternion() {
  _oneof_case_[0] = kQuaternion;
}
inline ::MathMessage::Quaternion* KeyValue::release_quaternion() {
  // @@protoc_insertion_point(field_release:LuaMessage.KeyValue.quaternion)
  if (_internal_has_quaternion()) {
    clear_has_value();
      ::MathMessage::Quaternion* temp = value_.quaternion_;
    value_.quaternion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MathMessage::Quaternion& KeyValue::_internal_quaternion() const {
  return _internal_has_quaternion()
      ? *value_.quaternion_
      : *reinterpret_cast< ::MathMessage::Quaternion*>(&::MathMessage::_Quaternion_default_instance_);
}
inline const ::MathMessage::Quaternion& KeyValue::quaternion() const {
  // @@protoc_insertion_point(field_get:LuaMessage.KeyValue.quaternion)
  return _internal_quaternion();
}
inline ::MathMessage::Quaternion* KeyValue::_internal_mutable_quaternion() {
  if (!_internal_has_quaternion()) {
    clear_value();
    set_has_quaternion();
    value_.quaternion_ = CreateMaybeMessage< ::MathMessage::Quaternion >(
        GetArenaNoVirtual());
  }
  return value_.quaternion_;
}
inline ::MathMessage::Quaternion* KeyValue::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable:LuaMessage.KeyValue.quaternion)
  return _internal_mutable_quaternion();
}

// .MathMessage.UvMap uv = 7;
inline bool KeyValue::_internal_has_uv() const {
  return value_case() == kUv;
}
inline bool KeyValue::has_uv() const {
  return _internal_has_uv();
}
inline void KeyValue::set_has_uv() {
  _oneof_case_[0] = kUv;
}
inline ::MathMessage::UvMap* KeyValue::release_uv() {
  // @@protoc_insertion_point(field_release:LuaMessage.KeyValue.uv)
  if (_internal_has_uv()) {
    clear_has_value();
      ::MathMessage::UvMap* temp = value_.uv_;
    value_.uv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MathMessage::UvMap& KeyValue::_internal_uv() const {
  return _internal_has_uv()
      ? *value_.uv_
      : *reinterpret_cast< ::MathMessage::UvMap*>(&::MathMessage::_UvMap_default_instance_);
}
inline const ::MathMessage::UvMap& KeyValue::uv() const {
  // @@protoc_insertion_point(field_get:LuaMessage.KeyValue.uv)
  return _internal_uv();
}
inline ::MathMessage::UvMap* KeyValue::_internal_mutable_uv() {
  if (!_internal_has_uv()) {
    clear_value();
    set_has_uv();
    value_.uv_ = CreateMaybeMessage< ::MathMessage::UvMap >(
        GetArenaNoVirtual());
  }
  return value_.uv_;
}
inline ::MathMessage::UvMap* KeyValue::mutable_uv() {
  // @@protoc_insertion_point(field_mutable:LuaMessage.KeyValue.uv)
  return _internal_mutable_uv();
}

// .MathMessage.Color color = 8;
inline bool KeyValue::_internal_has_color() const {
  return value_case() == kColor;
}
inline bool KeyValue::has_color() const {
  return _internal_has_color();
}
inline void KeyValue::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline ::MathMessage::Color* KeyValue::release_color() {
  // @@protoc_insertion_point(field_release:LuaMessage.KeyValue.color)
  if (_internal_has_color()) {
    clear_has_value();
      ::MathMessage::Color* temp = value_.color_;
    value_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MathMessage::Color& KeyValue::_internal_color() const {
  return _internal_has_color()
      ? *value_.color_
      : *reinterpret_cast< ::MathMessage::Color*>(&::MathMessage::_Color_default_instance_);
}
inline const ::MathMessage::Color& KeyValue::color() const {
  // @@protoc_insertion_point(field_get:LuaMessage.KeyValue.color)
  return _internal_color();
}
inline ::MathMessage::Color* KeyValue::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_value();
    set_has_color();
    value_.color_ = CreateMaybeMessage< ::MathMessage::Color >(
        GetArenaNoVirtual());
  }
  return value_.color_;
}
inline ::MathMessage::Color* KeyValue::mutable_color() {
  // @@protoc_insertion_point(field_mutable:LuaMessage.KeyValue.color)
  return _internal_mutable_color();
}

// .LuaMessage.List list = 9;
inline bool KeyValue::_internal_has_list() const {
  return value_case() == kList;
}
inline bool KeyValue::has_list() const {
  return _internal_has_list();
}
inline void KeyValue::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void KeyValue::clear_list() {
  if (_internal_has_list()) {
    delete value_.list_;
    clear_has_value();
  }
}
inline ::LuaMessage::List* KeyValue::release_list() {
  // @@protoc_insertion_point(field_release:LuaMessage.KeyValue.list)
  if (_internal_has_list()) {
    clear_has_value();
      ::LuaMessage::List* temp = value_.list_;
    value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LuaMessage::List& KeyValue::_internal_list() const {
  return _internal_has_list()
      ? *value_.list_
      : *reinterpret_cast< ::LuaMessage::List*>(&::LuaMessage::_List_default_instance_);
}
inline const ::LuaMessage::List& KeyValue::list() const {
  // @@protoc_insertion_point(field_get:LuaMessage.KeyValue.list)
  return _internal_list();
}
inline ::LuaMessage::List* KeyValue::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_value();
    set_has_list();
    value_.list_ = CreateMaybeMessage< ::LuaMessage::List >(
        GetArenaNoVirtual());
  }
  return value_.list_;
}
inline ::LuaMessage::List* KeyValue::mutable_list() {
  // @@protoc_insertion_point(field_mutable:LuaMessage.KeyValue.list)
  return _internal_mutable_list();
}

inline bool KeyValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void KeyValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline KeyValue::ValueCase KeyValue::value_case() const {
  return KeyValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Node

// .LuaMessage.List list = 1;
inline bool Node::_internal_has_list() const {
  return content_case() == kList;
}
inline bool Node::has_list() const {
  return _internal_has_list();
}
inline void Node::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void Node::clear_list() {
  if (_internal_has_list()) {
    delete content_.list_;
    clear_has_content();
  }
}
inline ::LuaMessage::List* Node::release_list() {
  // @@protoc_insertion_point(field_release:LuaMessage.Node.list)
  if (_internal_has_list()) {
    clear_has_content();
      ::LuaMessage::List* temp = content_.list_;
    content_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LuaMessage::List& Node::_internal_list() const {
  return _internal_has_list()
      ? *content_.list_
      : *reinterpret_cast< ::LuaMessage::List*>(&::LuaMessage::_List_default_instance_);
}
inline const ::LuaMessage::List& Node::list() const {
  // @@protoc_insertion_point(field_get:LuaMessage.Node.list)
  return _internal_list();
}
inline ::LuaMessage::List* Node::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_content();
    set_has_list();
    content_.list_ = CreateMaybeMessage< ::LuaMessage::List >(
        GetArenaNoVirtual());
  }
  return content_.list_;
}
inline ::LuaMessage::List* Node::mutable_list() {
  // @@protoc_insertion_point(field_mutable:LuaMessage.Node.list)
  return _internal_mutable_list();
}

// .LuaMessage.KeyValue value = 2;
inline bool Node::_internal_has_value() const {
  return content_case() == kValue;
}
inline bool Node::has_value() const {
  return _internal_has_value();
}
inline void Node::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void Node::clear_value() {
  if (_internal_has_value()) {
    delete content_.value_;
    clear_has_content();
  }
}
inline ::LuaMessage::KeyValue* Node::release_value() {
  // @@protoc_insertion_point(field_release:LuaMessage.Node.value)
  if (_internal_has_value()) {
    clear_has_content();
      ::LuaMessage::KeyValue* temp = content_.value_;
    content_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LuaMessage::KeyValue& Node::_internal_value() const {
  return _internal_has_value()
      ? *content_.value_
      : *reinterpret_cast< ::LuaMessage::KeyValue*>(&::LuaMessage::_KeyValue_default_instance_);
}
inline const ::LuaMessage::KeyValue& Node::value() const {
  // @@protoc_insertion_point(field_get:LuaMessage.Node.value)
  return _internal_value();
}
inline ::LuaMessage::KeyValue* Node::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_content();
    set_has_value();
    content_.value_ = CreateMaybeMessage< ::LuaMessage::KeyValue >(
        GetArenaNoVirtual());
  }
  return content_.value_;
}
inline ::LuaMessage::KeyValue* Node::mutable_value() {
  // @@protoc_insertion_point(field_mutable:LuaMessage.Node.value)
  return _internal_mutable_value();
}

inline bool Node::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Node::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Node::ContentCase Node::content_case() const {
  return Node::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// List

// repeated .LuaMessage.Node node = 1;
inline int List::_internal_node_size() const {
  return node_.size();
}
inline int List::node_size() const {
  return _internal_node_size();
}
inline void List::clear_node() {
  node_.Clear();
}
inline ::LuaMessage::Node* List::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:LuaMessage.List.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LuaMessage::Node >*
List::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:LuaMessage.List.node)
  return &node_;
}
inline const ::LuaMessage::Node& List::_internal_node(int index) const {
  return node_.Get(index);
}
inline const ::LuaMessage::Node& List::node(int index) const {
  // @@protoc_insertion_point(field_get:LuaMessage.List.node)
  return _internal_node(index);
}
inline ::LuaMessage::Node* List::_internal_add_node() {
  return node_.Add();
}
inline ::LuaMessage::Node* List::add_node() {
  // @@protoc_insertion_point(field_add:LuaMessage.List.node)
  return _internal_add_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LuaMessage::Node >&
List::node() const {
  // @@protoc_insertion_point(field_list:LuaMessage.List.node)
  return node_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LuaMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lua_2eproto
