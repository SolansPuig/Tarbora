// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_basic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_basic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_basic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_basic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_basic_2eproto;
namespace MessageContent {
class Actor;
class ActorDefaultTypeInternal;
extern ActorDefaultTypeInternal _Actor_default_instance_;
class ApplyPhysics;
class ApplyPhysicsDefaultTypeInternal;
extern ApplyPhysicsDefaultTypeInternal _ApplyPhysics_default_instance_;
class CreateActor;
class CreateActorDefaultTypeInternal;
extern CreateActorDefaultTypeInternal _CreateActor_default_instance_;
class CreateActorModel;
class CreateActorModelDefaultTypeInternal;
extern CreateActorModelDefaultTypeInternal _CreateActorModel_default_instance_;
class LookAt;
class LookAtDefaultTypeInternal;
extern LookAtDefaultTypeInternal _LookAt_default_instance_;
class MoveActor;
class MoveActorDefaultTypeInternal;
extern MoveActorDefaultTypeInternal _MoveActor_default_instance_;
class MoveNode;
class MoveNodeDefaultTypeInternal;
extern MoveNodeDefaultTypeInternal _MoveNode_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class SetAnimation;
class SetAnimationDefaultTypeInternal;
extern SetAnimationDefaultTypeInternal _SetAnimation_default_instance_;
}  // namespace MessageContent
PROTOBUF_NAMESPACE_OPEN
template<> ::MessageContent::Actor* Arena::CreateMaybeMessage<::MessageContent::Actor>(Arena*);
template<> ::MessageContent::ApplyPhysics* Arena::CreateMaybeMessage<::MessageContent::ApplyPhysics>(Arena*);
template<> ::MessageContent::CreateActor* Arena::CreateMaybeMessage<::MessageContent::CreateActor>(Arena*);
template<> ::MessageContent::CreateActorModel* Arena::CreateMaybeMessage<::MessageContent::CreateActorModel>(Arena*);
template<> ::MessageContent::LookAt* Arena::CreateMaybeMessage<::MessageContent::LookAt>(Arena*);
template<> ::MessageContent::MoveActor* Arena::CreateMaybeMessage<::MessageContent::MoveActor>(Arena*);
template<> ::MessageContent::MoveNode* Arena::CreateMaybeMessage<::MessageContent::MoveNode>(Arena*);
template<> ::MessageContent::Node* Arena::CreateMaybeMessage<::MessageContent::Node>(Arena*);
template<> ::MessageContent::SetAnimation* Arena::CreateMaybeMessage<::MessageContent::SetAnimation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MessageContent {

// ===================================================================

class Actor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageContent.Actor) */ {
 public:
  Actor();
  virtual ~Actor();

  Actor(const Actor& from);
  Actor(Actor&& from) noexcept
    : Actor() {
    *this = ::std::move(from);
  }

  inline Actor& operator=(const Actor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Actor& operator=(Actor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Actor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Actor* internal_default_instance() {
    return reinterpret_cast<const Actor*>(
               &_Actor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Actor& a, Actor& b) {
    a.Swap(&b);
  }
  inline void Swap(Actor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Actor* New() const final {
    return CreateMaybeMessage<Actor>(nullptr);
  }

  Actor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Actor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Actor& from);
  void MergeFrom(const Actor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageContent.Actor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basic_2eproto);
    return ::descriptor_table_basic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:MessageContent.Actor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageContent.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageContent.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basic_2eproto);
    return ::descriptor_table_basic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:MessageContent.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class CreateActor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageContent.CreateActor) */ {
 public:
  CreateActor();
  virtual ~CreateActor();

  CreateActor(const CreateActor& from);
  CreateActor(CreateActor&& from) noexcept
    : CreateActor() {
    *this = ::std::move(from);
  }

  inline CreateActor& operator=(const CreateActor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateActor& operator=(CreateActor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateActor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateActor* internal_default_instance() {
    return reinterpret_cast<const CreateActor*>(
               &_CreateActor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateActor& a, CreateActor& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateActor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateActor* New() const final {
    return CreateMaybeMessage<CreateActor>(nullptr);
  }

  CreateActor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateActor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateActor& from);
  void MergeFrom(const CreateActor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateActor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageContent.CreateActor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basic_2eproto);
    return ::descriptor_table_basic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEntityFieldNumber = 2,
    kVariantFieldNumber = 3,
    kPositionFieldNumber = 4,
    kRotationFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string entity = 2;
  void clear_entity();
  const std::string& entity() const;
  void set_entity(const std::string& value);
  void set_entity(std::string&& value);
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  std::string* mutable_entity();
  std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string variant = 3;
  void clear_variant();
  const std::string& variant() const;
  void set_variant(const std::string& value);
  void set_variant(std::string&& value);
  void set_variant(const char* value);
  void set_variant(const char* value, size_t size);
  std::string* mutable_variant();
  std::string* release_variant();
  void set_allocated_variant(std::string* variant);
  private:
  const std::string& _internal_variant() const;
  void _internal_set_variant(const std::string& value);
  std::string* _internal_mutable_variant();
  public:

  // .MathMessage.Vector position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::MathMessage::Vector& position() const;
  ::MathMessage::Vector* release_position();
  ::MathMessage::Vector* mutable_position();
  void set_allocated_position(::MathMessage::Vector* position);
  private:
  const ::MathMessage::Vector& _internal_position() const;
  ::MathMessage::Vector* _internal_mutable_position();
  public:

  // .MathMessage.Quaternion rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::MathMessage::Quaternion& rotation() const;
  ::MathMessage::Quaternion* release_rotation();
  ::MathMessage::Quaternion* mutable_rotation();
  void set_allocated_rotation(::MathMessage::Quaternion* rotation);
  private:
  const ::MathMessage::Quaternion& _internal_rotation() const;
  ::MathMessage::Quaternion* _internal_mutable_rotation();
  public:

  // @@protoc_insertion_point(class_scope:MessageContent.CreateActor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variant_;
  ::MathMessage::Vector* position_;
  ::MathMessage::Quaternion* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class CreateActorModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageContent.CreateActorModel) */ {
 public:
  CreateActorModel();
  virtual ~CreateActorModel();

  CreateActorModel(const CreateActorModel& from);
  CreateActorModel(CreateActorModel&& from) noexcept
    : CreateActorModel() {
    *this = ::std::move(from);
  }

  inline CreateActorModel& operator=(const CreateActorModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateActorModel& operator=(CreateActorModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateActorModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateActorModel* internal_default_instance() {
    return reinterpret_cast<const CreateActorModel*>(
               &_CreateActorModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateActorModel& a, CreateActorModel& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateActorModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateActorModel* New() const final {
    return CreateMaybeMessage<CreateActorModel>(nullptr);
  }

  CreateActorModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateActorModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateActorModel& from);
  void MergeFrom(const CreateActorModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateActorModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageContent.CreateActorModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basic_2eproto);
    return ::descriptor_table_basic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kModelFieldNumber = 2,
    kMaterialFieldNumber = 3,
    kRenderPassFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string model = 2;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string material = 3;
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // uint32 render_pass = 4;
  void clear_render_pass();
  ::PROTOBUF_NAMESPACE_ID::uint32 render_pass() const;
  void set_render_pass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_render_pass() const;
  void _internal_set_render_pass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MessageContent.CreateActorModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  ::PROTOBUF_NAMESPACE_ID::uint32 render_pass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class MoveActor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageContent.MoveActor) */ {
 public:
  MoveActor();
  virtual ~MoveActor();

  MoveActor(const MoveActor& from);
  MoveActor(MoveActor&& from) noexcept
    : MoveActor() {
    *this = ::std::move(from);
  }

  inline MoveActor& operator=(const MoveActor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveActor& operator=(MoveActor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveActor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveActor* internal_default_instance() {
    return reinterpret_cast<const MoveActor*>(
               &_MoveActor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MoveActor& a, MoveActor& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveActor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveActor* New() const final {
    return CreateMaybeMessage<MoveActor>(nullptr);
  }

  MoveActor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveActor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveActor& from);
  void MergeFrom(const MoveActor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveActor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageContent.MoveActor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basic_2eproto);
    return ::descriptor_table_basic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .MathMessage.Vector position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::MathMessage::Vector& position() const;
  ::MathMessage::Vector* release_position();
  ::MathMessage::Vector* mutable_position();
  void set_allocated_position(::MathMessage::Vector* position);
  private:
  const ::MathMessage::Vector& _internal_position() const;
  ::MathMessage::Vector* _internal_mutable_position();
  public:

  // .MathMessage.Quaternion rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::MathMessage::Quaternion& rotation() const;
  ::MathMessage::Quaternion* release_rotation();
  ::MathMessage::Quaternion* mutable_rotation();
  void set_allocated_rotation(::MathMessage::Quaternion* rotation);
  private:
  const ::MathMessage::Quaternion& _internal_rotation() const;
  ::MathMessage::Quaternion* _internal_mutable_rotation();
  public:

  // @@protoc_insertion_point(class_scope:MessageContent.MoveActor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::MathMessage::Vector* position_;
  ::MathMessage::Quaternion* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class MoveNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageContent.MoveNode) */ {
 public:
  MoveNode();
  virtual ~MoveNode();

  MoveNode(const MoveNode& from);
  MoveNode(MoveNode&& from) noexcept
    : MoveNode() {
    *this = ::std::move(from);
  }

  inline MoveNode& operator=(const MoveNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveNode& operator=(MoveNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveNode* internal_default_instance() {
    return reinterpret_cast<const MoveNode*>(
               &_MoveNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MoveNode& a, MoveNode& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveNode* New() const final {
    return CreateMaybeMessage<MoveNode>(nullptr);
  }

  MoveNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveNode& from);
  void MergeFrom(const MoveNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageContent.MoveNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basic_2eproto);
    return ::descriptor_table_basic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .MathMessage.Vector position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::MathMessage::Vector& position() const;
  ::MathMessage::Vector* release_position();
  ::MathMessage::Vector* mutable_position();
  void set_allocated_position(::MathMessage::Vector* position);
  private:
  const ::MathMessage::Vector& _internal_position() const;
  ::MathMessage::Vector* _internal_mutable_position();
  public:

  // .MathMessage.Quaternion rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::MathMessage::Quaternion& rotation() const;
  ::MathMessage::Quaternion* release_rotation();
  ::MathMessage::Quaternion* mutable_rotation();
  void set_allocated_rotation(::MathMessage::Quaternion* rotation);
  private:
  const ::MathMessage::Quaternion& _internal_rotation() const;
  ::MathMessage::Quaternion* _internal_mutable_rotation();
  public:

  // @@protoc_insertion_point(class_scope:MessageContent.MoveNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::MathMessage::Vector* position_;
  ::MathMessage::Quaternion* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class SetAnimation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageContent.SetAnimation) */ {
 public:
  SetAnimation();
  virtual ~SetAnimation();

  SetAnimation(const SetAnimation& from);
  SetAnimation(SetAnimation&& from) noexcept
    : SetAnimation() {
    *this = ::std::move(from);
  }

  inline SetAnimation& operator=(const SetAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnimation& operator=(SetAnimation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAnimation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAnimation* internal_default_instance() {
    return reinterpret_cast<const SetAnimation*>(
               &_SetAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetAnimation& a, SetAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAnimation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAnimation* New() const final {
    return CreateMaybeMessage<SetAnimation>(nullptr);
  }

  SetAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAnimation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAnimation& from);
  void MergeFrom(const SetAnimation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAnimation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageContent.SetAnimation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basic_2eproto);
    return ::descriptor_table_basic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAnimationFieldNumber = 2,
    kFileFieldNumber = 3,
    kSpeedFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string animation = 2;
  void clear_animation();
  const std::string& animation() const;
  void set_animation(const std::string& value);
  void set_animation(std::string&& value);
  void set_animation(const char* value);
  void set_animation(const char* value, size_t size);
  std::string* mutable_animation();
  std::string* release_animation();
  void set_allocated_animation(std::string* animation);
  private:
  const std::string& _internal_animation() const;
  void _internal_set_animation(const std::string& value);
  std::string* _internal_mutable_animation();
  public:

  // string file = 3;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // float speed = 4;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:MessageContent.SetAnimation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class ApplyPhysics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageContent.ApplyPhysics) */ {
 public:
  ApplyPhysics();
  virtual ~ApplyPhysics();

  ApplyPhysics(const ApplyPhysics& from);
  ApplyPhysics(ApplyPhysics&& from) noexcept
    : ApplyPhysics() {
    *this = ::std::move(from);
  }

  inline ApplyPhysics& operator=(const ApplyPhysics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyPhysics& operator=(ApplyPhysics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyPhysics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyPhysics* internal_default_instance() {
    return reinterpret_cast<const ApplyPhysics*>(
               &_ApplyPhysics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ApplyPhysics& a, ApplyPhysics& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyPhysics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyPhysics* New() const final {
    return CreateMaybeMessage<ApplyPhysics>(nullptr);
  }

  ApplyPhysics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyPhysics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyPhysics& from);
  void MergeFrom(const ApplyPhysics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyPhysics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageContent.ApplyPhysics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basic_2eproto);
    return ::descriptor_table_basic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .MathMessage.Vector direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::MathMessage::Vector& direction() const;
  ::MathMessage::Vector* release_direction();
  ::MathMessage::Vector* mutable_direction();
  void set_allocated_direction(::MathMessage::Vector* direction);
  private:
  const ::MathMessage::Vector& _internal_direction() const;
  ::MathMessage::Vector* _internal_mutable_direction();
  public:

  // @@protoc_insertion_point(class_scope:MessageContent.ApplyPhysics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::MathMessage::Vector* direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class LookAt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageContent.LookAt) */ {
 public:
  LookAt();
  virtual ~LookAt();

  LookAt(const LookAt& from);
  LookAt(LookAt&& from) noexcept
    : LookAt() {
    *this = ::std::move(from);
  }

  inline LookAt& operator=(const LookAt& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookAt& operator=(LookAt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LookAt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookAt* internal_default_instance() {
    return reinterpret_cast<const LookAt*>(
               &_LookAt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LookAt& a, LookAt& b) {
    a.Swap(&b);
  }
  inline void Swap(LookAt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookAt* New() const final {
    return CreateMaybeMessage<LookAt>(nullptr);
  }

  LookAt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookAt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LookAt& from);
  void MergeFrom(const LookAt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookAt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageContent.LookAt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basic_2eproto);
    return ::descriptor_table_basic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTargetFieldNumber = 2,
    kDirectionFieldNumber = 4,
    kDistanceFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string target = 2;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // .MathMessage.Vector direction = 4;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::MathMessage::Vector& direction() const;
  ::MathMessage::Vector* release_direction();
  ::MathMessage::Vector* mutable_direction();
  void set_allocated_direction(::MathMessage::Vector* direction);
  private:
  const ::MathMessage::Vector& _internal_direction() const;
  ::MathMessage::Vector* _internal_mutable_direction();
  public:

  // float distance = 3;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:MessageContent.LookAt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::MathMessage::Vector* direction_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Actor

// string id = 1;
inline void Actor::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Actor::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.Actor.id)
  return _internal_id();
}
inline void Actor::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageContent.Actor.id)
}
inline std::string* Actor::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageContent.Actor.id)
  return _internal_mutable_id();
}
inline const std::string& Actor::_internal_id() const {
  return id_.GetNoArena();
}
inline void Actor::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Actor::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.Actor.id)
}
inline void Actor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.Actor.id)
}
inline void Actor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.Actor.id)
}
inline std::string* Actor::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Actor::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.Actor.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Actor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.Actor.id)
}

// -------------------------------------------------------------------

// Node

// string id = 1;
inline void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.Node.id)
  return _internal_id();
}
inline void Node::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageContent.Node.id)
}
inline std::string* Node::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageContent.Node.id)
  return _internal_mutable_id();
}
inline const std::string& Node::_internal_id() const {
  return id_.GetNoArena();
}
inline void Node::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.Node.id)
}
inline void Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.Node.id)
}
inline void Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.Node.id)
}
inline std::string* Node::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.Node.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.Node.id)
}

// string name = 2;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:MessageContent.Node.name)
  return _internal_name();
}
inline void Node::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MessageContent.Node.name)
}
inline std::string* Node::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MessageContent.Node.name)
  return _internal_mutable_name();
}
inline const std::string& Node::_internal_name() const {
  return name_.GetNoArena();
}
inline void Node::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.Node.name)
}
inline void Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.Node.name)
}
inline std::string* Node::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:MessageContent.Node.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.Node.name)
}

// -------------------------------------------------------------------

// CreateActor

// string id = 1;
inline void CreateActor::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateActor::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.id)
  return _internal_id();
}
inline void CreateActor::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActor.id)
}
inline std::string* CreateActor::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.id)
  return _internal_mutable_id();
}
inline const std::string& CreateActor::_internal_id() const {
  return id_.GetNoArena();
}
inline void CreateActor::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateActor::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.CreateActor.id)
}
inline void CreateActor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.CreateActor.id)
}
inline void CreateActor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.CreateActor.id)
}
inline std::string* CreateActor::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateActor::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.id)
}

// string entity = 2;
inline void CreateActor::clear_entity() {
  entity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateActor::entity() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.entity)
  return _internal_entity();
}
inline void CreateActor::set_entity(const std::string& value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActor.entity)
}
inline std::string* CreateActor::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.entity)
  return _internal_mutable_entity();
}
inline const std::string& CreateActor::_internal_entity() const {
  return entity_.GetNoArena();
}
inline void CreateActor::_internal_set_entity(const std::string& value) {
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateActor::set_entity(std::string&& value) {
  
  entity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.CreateActor.entity)
}
inline void CreateActor::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.CreateActor.entity)
}
inline void CreateActor::set_entity(const char* value, size_t size) {
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.CreateActor.entity)
}
inline std::string* CreateActor::_internal_mutable_entity() {
  
  return entity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateActor::release_entity() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.entity)
  
  return entity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActor::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.entity)
}

// string variant = 3;
inline void CreateActor::clear_variant() {
  variant_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateActor::variant() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.variant)
  return _internal_variant();
}
inline void CreateActor::set_variant(const std::string& value) {
  _internal_set_variant(value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActor.variant)
}
inline std::string* CreateActor::mutable_variant() {
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.variant)
  return _internal_mutable_variant();
}
inline const std::string& CreateActor::_internal_variant() const {
  return variant_.GetNoArena();
}
inline void CreateActor::_internal_set_variant(const std::string& value) {
  
  variant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateActor::set_variant(std::string&& value) {
  
  variant_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.CreateActor.variant)
}
inline void CreateActor::set_variant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.CreateActor.variant)
}
inline void CreateActor::set_variant(const char* value, size_t size) {
  
  variant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.CreateActor.variant)
}
inline std::string* CreateActor::_internal_mutable_variant() {
  
  return variant_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateActor::release_variant() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.variant)
  
  return variant_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActor::set_allocated_variant(std::string* variant) {
  if (variant != nullptr) {
    
  } else {
    
  }
  variant_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variant);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.variant)
}

// .MathMessage.Vector position = 4;
inline bool CreateActor::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CreateActor::has_position() const {
  return _internal_has_position();
}
inline const ::MathMessage::Vector& CreateActor::_internal_position() const {
  const ::MathMessage::Vector* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vector*>(
      &::MathMessage::_Vector_default_instance_);
}
inline const ::MathMessage::Vector& CreateActor::position() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.position)
  return _internal_position();
}
inline ::MathMessage::Vector* CreateActor::release_position() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.position)
  
  ::MathMessage::Vector* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::MathMessage::Vector* CreateActor::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vector>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::MathMessage::Vector* CreateActor::mutable_position() {
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.position)
  return _internal_mutable_position();
}
inline void CreateActor::set_allocated_position(::MathMessage::Vector* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.position)
}

// .MathMessage.Quaternion rotation = 5;
inline bool CreateActor::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool CreateActor::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::MathMessage::Quaternion& CreateActor::_internal_rotation() const {
  const ::MathMessage::Quaternion* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Quaternion*>(
      &::MathMessage::_Quaternion_default_instance_);
}
inline const ::MathMessage::Quaternion& CreateActor::rotation() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.rotation)
  return _internal_rotation();
}
inline ::MathMessage::Quaternion* CreateActor::release_rotation() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.rotation)
  
  ::MathMessage::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::MathMessage::Quaternion* CreateActor::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Quaternion>(GetArenaNoVirtual());
    rotation_ = p;
  }
  return rotation_;
}
inline ::MathMessage::Quaternion* CreateActor::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.rotation)
  return _internal_mutable_rotation();
}
inline void CreateActor::set_allocated_rotation(::MathMessage::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.rotation)
}

// -------------------------------------------------------------------

// CreateActorModel

// string id = 1;
inline void CreateActorModel::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateActorModel::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActorModel.id)
  return _internal_id();
}
inline void CreateActorModel::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActorModel.id)
}
inline std::string* CreateActorModel::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActorModel.id)
  return _internal_mutable_id();
}
inline const std::string& CreateActorModel::_internal_id() const {
  return id_.GetNoArena();
}
inline void CreateActorModel::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateActorModel::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.CreateActorModel.id)
}
inline void CreateActorModel::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.CreateActorModel.id)
}
inline void CreateActorModel::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.CreateActorModel.id)
}
inline std::string* CreateActorModel::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateActorModel::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActorModel.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActorModel::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActorModel.id)
}

// string model = 2;
inline void CreateActorModel::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateActorModel::model() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActorModel.model)
  return _internal_model();
}
inline void CreateActorModel::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActorModel.model)
}
inline std::string* CreateActorModel::mutable_model() {
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActorModel.model)
  return _internal_mutable_model();
}
inline const std::string& CreateActorModel::_internal_model() const {
  return model_.GetNoArena();
}
inline void CreateActorModel::_internal_set_model(const std::string& value) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateActorModel::set_model(std::string&& value) {
  
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.CreateActorModel.model)
}
inline void CreateActorModel::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.CreateActorModel.model)
}
inline void CreateActorModel::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.CreateActorModel.model)
}
inline std::string* CreateActorModel::_internal_mutable_model() {
  
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateActorModel::release_model() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActorModel.model)
  
  return model_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActorModel::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActorModel.model)
}

// string material = 3;
inline void CreateActorModel::clear_material() {
  material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateActorModel::material() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActorModel.material)
  return _internal_material();
}
inline void CreateActorModel::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActorModel.material)
}
inline std::string* CreateActorModel::mutable_material() {
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActorModel.material)
  return _internal_mutable_material();
}
inline const std::string& CreateActorModel::_internal_material() const {
  return material_.GetNoArena();
}
inline void CreateActorModel::_internal_set_material(const std::string& value) {
  
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateActorModel::set_material(std::string&& value) {
  
  material_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.CreateActorModel.material)
}
inline void CreateActorModel::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.CreateActorModel.material)
}
inline void CreateActorModel::set_material(const char* value, size_t size) {
  
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.CreateActorModel.material)
}
inline std::string* CreateActorModel::_internal_mutable_material() {
  
  return material_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateActorModel::release_material() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActorModel.material)
  
  return material_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActorModel::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  material_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActorModel.material)
}

// uint32 render_pass = 4;
inline void CreateActorModel::clear_render_pass() {
  render_pass_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateActorModel::_internal_render_pass() const {
  return render_pass_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateActorModel::render_pass() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActorModel.render_pass)
  return _internal_render_pass();
}
inline void CreateActorModel::_internal_set_render_pass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  render_pass_ = value;
}
inline void CreateActorModel::set_render_pass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_render_pass(value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActorModel.render_pass)
}

// -------------------------------------------------------------------

// MoveActor

// string id = 1;
inline void MoveActor::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveActor::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveActor.id)
  return _internal_id();
}
inline void MoveActor::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageContent.MoveActor.id)
}
inline std::string* MoveActor::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveActor.id)
  return _internal_mutable_id();
}
inline const std::string& MoveActor::_internal_id() const {
  return id_.GetNoArena();
}
inline void MoveActor::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MoveActor::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.MoveActor.id)
}
inline void MoveActor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.MoveActor.id)
}
inline void MoveActor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.MoveActor.id)
}
inline std::string* MoveActor::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveActor::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveActor.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveActor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveActor.id)
}

// .MathMessage.Vector position = 2;
inline bool MoveActor::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool MoveActor::has_position() const {
  return _internal_has_position();
}
inline const ::MathMessage::Vector& MoveActor::_internal_position() const {
  const ::MathMessage::Vector* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vector*>(
      &::MathMessage::_Vector_default_instance_);
}
inline const ::MathMessage::Vector& MoveActor::position() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveActor.position)
  return _internal_position();
}
inline ::MathMessage::Vector* MoveActor::release_position() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveActor.position)
  
  ::MathMessage::Vector* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::MathMessage::Vector* MoveActor::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vector>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::MathMessage::Vector* MoveActor::mutable_position() {
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveActor.position)
  return _internal_mutable_position();
}
inline void MoveActor::set_allocated_position(::MathMessage::Vector* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveActor.position)
}

// .MathMessage.Quaternion rotation = 3;
inline bool MoveActor::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool MoveActor::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::MathMessage::Quaternion& MoveActor::_internal_rotation() const {
  const ::MathMessage::Quaternion* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Quaternion*>(
      &::MathMessage::_Quaternion_default_instance_);
}
inline const ::MathMessage::Quaternion& MoveActor::rotation() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveActor.rotation)
  return _internal_rotation();
}
inline ::MathMessage::Quaternion* MoveActor::release_rotation() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveActor.rotation)
  
  ::MathMessage::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::MathMessage::Quaternion* MoveActor::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Quaternion>(GetArenaNoVirtual());
    rotation_ = p;
  }
  return rotation_;
}
inline ::MathMessage::Quaternion* MoveActor::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveActor.rotation)
  return _internal_mutable_rotation();
}
inline void MoveActor::set_allocated_rotation(::MathMessage::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveActor.rotation)
}

// -------------------------------------------------------------------

// MoveNode

// string id = 1;
inline void MoveNode::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveNode::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveNode.id)
  return _internal_id();
}
inline void MoveNode::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageContent.MoveNode.id)
}
inline std::string* MoveNode::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveNode.id)
  return _internal_mutable_id();
}
inline const std::string& MoveNode::_internal_id() const {
  return id_.GetNoArena();
}
inline void MoveNode::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MoveNode::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.MoveNode.id)
}
inline void MoveNode::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.MoveNode.id)
}
inline void MoveNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.MoveNode.id)
}
inline std::string* MoveNode::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveNode::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveNode.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveNode::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveNode.id)
}

// string name = 2;
inline void MoveNode::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveNode::name() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveNode.name)
  return _internal_name();
}
inline void MoveNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MessageContent.MoveNode.name)
}
inline std::string* MoveNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveNode.name)
  return _internal_mutable_name();
}
inline const std::string& MoveNode::_internal_name() const {
  return name_.GetNoArena();
}
inline void MoveNode::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MoveNode::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.MoveNode.name)
}
inline void MoveNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.MoveNode.name)
}
inline void MoveNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.MoveNode.name)
}
inline std::string* MoveNode::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveNode::release_name() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveNode.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveNode.name)
}

// .MathMessage.Vector position = 3;
inline bool MoveNode::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool MoveNode::has_position() const {
  return _internal_has_position();
}
inline const ::MathMessage::Vector& MoveNode::_internal_position() const {
  const ::MathMessage::Vector* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vector*>(
      &::MathMessage::_Vector_default_instance_);
}
inline const ::MathMessage::Vector& MoveNode::position() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveNode.position)
  return _internal_position();
}
inline ::MathMessage::Vector* MoveNode::release_position() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveNode.position)
  
  ::MathMessage::Vector* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::MathMessage::Vector* MoveNode::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vector>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::MathMessage::Vector* MoveNode::mutable_position() {
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveNode.position)
  return _internal_mutable_position();
}
inline void MoveNode::set_allocated_position(::MathMessage::Vector* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveNode.position)
}

// .MathMessage.Quaternion rotation = 4;
inline bool MoveNode::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool MoveNode::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::MathMessage::Quaternion& MoveNode::_internal_rotation() const {
  const ::MathMessage::Quaternion* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Quaternion*>(
      &::MathMessage::_Quaternion_default_instance_);
}
inline const ::MathMessage::Quaternion& MoveNode::rotation() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveNode.rotation)
  return _internal_rotation();
}
inline ::MathMessage::Quaternion* MoveNode::release_rotation() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveNode.rotation)
  
  ::MathMessage::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::MathMessage::Quaternion* MoveNode::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Quaternion>(GetArenaNoVirtual());
    rotation_ = p;
  }
  return rotation_;
}
inline ::MathMessage::Quaternion* MoveNode::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveNode.rotation)
  return _internal_mutable_rotation();
}
inline void MoveNode::set_allocated_rotation(::MathMessage::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveNode.rotation)
}

// -------------------------------------------------------------------

// SetAnimation

// string id = 1;
inline void SetAnimation::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAnimation::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.SetAnimation.id)
  return _internal_id();
}
inline void SetAnimation::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageContent.SetAnimation.id)
}
inline std::string* SetAnimation::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageContent.SetAnimation.id)
  return _internal_mutable_id();
}
inline const std::string& SetAnimation::_internal_id() const {
  return id_.GetNoArena();
}
inline void SetAnimation::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetAnimation::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.SetAnimation.id)
}
inline void SetAnimation::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.SetAnimation.id)
}
inline void SetAnimation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.SetAnimation.id)
}
inline std::string* SetAnimation::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAnimation::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.SetAnimation.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAnimation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.SetAnimation.id)
}

// string animation = 2;
inline void SetAnimation::clear_animation() {
  animation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAnimation::animation() const {
  // @@protoc_insertion_point(field_get:MessageContent.SetAnimation.animation)
  return _internal_animation();
}
inline void SetAnimation::set_animation(const std::string& value) {
  _internal_set_animation(value);
  // @@protoc_insertion_point(field_set:MessageContent.SetAnimation.animation)
}
inline std::string* SetAnimation::mutable_animation() {
  // @@protoc_insertion_point(field_mutable:MessageContent.SetAnimation.animation)
  return _internal_mutable_animation();
}
inline const std::string& SetAnimation::_internal_animation() const {
  return animation_.GetNoArena();
}
inline void SetAnimation::_internal_set_animation(const std::string& value) {
  
  animation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetAnimation::set_animation(std::string&& value) {
  
  animation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.SetAnimation.animation)
}
inline void SetAnimation::set_animation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  animation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.SetAnimation.animation)
}
inline void SetAnimation::set_animation(const char* value, size_t size) {
  
  animation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.SetAnimation.animation)
}
inline std::string* SetAnimation::_internal_mutable_animation() {
  
  return animation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAnimation::release_animation() {
  // @@protoc_insertion_point(field_release:MessageContent.SetAnimation.animation)
  
  return animation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAnimation::set_allocated_animation(std::string* animation) {
  if (animation != nullptr) {
    
  } else {
    
  }
  animation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), animation);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.SetAnimation.animation)
}

// string file = 3;
inline void SetAnimation::clear_file() {
  file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAnimation::file() const {
  // @@protoc_insertion_point(field_get:MessageContent.SetAnimation.file)
  return _internal_file();
}
inline void SetAnimation::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:MessageContent.SetAnimation.file)
}
inline std::string* SetAnimation::mutable_file() {
  // @@protoc_insertion_point(field_mutable:MessageContent.SetAnimation.file)
  return _internal_mutable_file();
}
inline const std::string& SetAnimation::_internal_file() const {
  return file_.GetNoArena();
}
inline void SetAnimation::_internal_set_file(const std::string& value) {
  
  file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetAnimation::set_file(std::string&& value) {
  
  file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.SetAnimation.file)
}
inline void SetAnimation::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.SetAnimation.file)
}
inline void SetAnimation::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.SetAnimation.file)
}
inline std::string* SetAnimation::_internal_mutable_file() {
  
  return file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAnimation::release_file() {
  // @@protoc_insertion_point(field_release:MessageContent.SetAnimation.file)
  
  return file_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAnimation::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.SetAnimation.file)
}

// float speed = 4;
inline void SetAnimation::clear_speed() {
  speed_ = 0;
}
inline float SetAnimation::_internal_speed() const {
  return speed_;
}
inline float SetAnimation::speed() const {
  // @@protoc_insertion_point(field_get:MessageContent.SetAnimation.speed)
  return _internal_speed();
}
inline void SetAnimation::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void SetAnimation::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:MessageContent.SetAnimation.speed)
}

// -------------------------------------------------------------------

// ApplyPhysics

// string id = 1;
inline void ApplyPhysics::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ApplyPhysics::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.ApplyPhysics.id)
  return _internal_id();
}
inline void ApplyPhysics::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageContent.ApplyPhysics.id)
}
inline std::string* ApplyPhysics::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageContent.ApplyPhysics.id)
  return _internal_mutable_id();
}
inline const std::string& ApplyPhysics::_internal_id() const {
  return id_.GetNoArena();
}
inline void ApplyPhysics::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ApplyPhysics::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.ApplyPhysics.id)
}
inline void ApplyPhysics::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.ApplyPhysics.id)
}
inline void ApplyPhysics::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.ApplyPhysics.id)
}
inline std::string* ApplyPhysics::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplyPhysics::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.ApplyPhysics.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyPhysics::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.ApplyPhysics.id)
}

// .MathMessage.Vector direction = 2;
inline bool ApplyPhysics::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool ApplyPhysics::has_direction() const {
  return _internal_has_direction();
}
inline const ::MathMessage::Vector& ApplyPhysics::_internal_direction() const {
  const ::MathMessage::Vector* p = direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vector*>(
      &::MathMessage::_Vector_default_instance_);
}
inline const ::MathMessage::Vector& ApplyPhysics::direction() const {
  // @@protoc_insertion_point(field_get:MessageContent.ApplyPhysics.direction)
  return _internal_direction();
}
inline ::MathMessage::Vector* ApplyPhysics::release_direction() {
  // @@protoc_insertion_point(field_release:MessageContent.ApplyPhysics.direction)
  
  ::MathMessage::Vector* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::MathMessage::Vector* ApplyPhysics::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vector>(GetArenaNoVirtual());
    direction_ = p;
  }
  return direction_;
}
inline ::MathMessage::Vector* ApplyPhysics::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:MessageContent.ApplyPhysics.direction)
  return _internal_mutable_direction();
}
inline void ApplyPhysics::set_allocated_direction(::MathMessage::Vector* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.ApplyPhysics.direction)
}

// -------------------------------------------------------------------

// LookAt

// string id = 1;
inline void LookAt::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LookAt::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.LookAt.id)
  return _internal_id();
}
inline void LookAt::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MessageContent.LookAt.id)
}
inline std::string* LookAt::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageContent.LookAt.id)
  return _internal_mutable_id();
}
inline const std::string& LookAt::_internal_id() const {
  return id_.GetNoArena();
}
inline void LookAt::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LookAt::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.LookAt.id)
}
inline void LookAt::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.LookAt.id)
}
inline void LookAt::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.LookAt.id)
}
inline std::string* LookAt::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LookAt::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.LookAt.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LookAt::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.LookAt.id)
}

// string target = 2;
inline void LookAt::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LookAt::target() const {
  // @@protoc_insertion_point(field_get:MessageContent.LookAt.target)
  return _internal_target();
}
inline void LookAt::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:MessageContent.LookAt.target)
}
inline std::string* LookAt::mutable_target() {
  // @@protoc_insertion_point(field_mutable:MessageContent.LookAt.target)
  return _internal_mutable_target();
}
inline const std::string& LookAt::_internal_target() const {
  return target_.GetNoArena();
}
inline void LookAt::_internal_set_target(const std::string& value) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LookAt::set_target(std::string&& value) {
  
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.LookAt.target)
}
inline void LookAt::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.LookAt.target)
}
inline void LookAt::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.LookAt.target)
}
inline std::string* LookAt::_internal_mutable_target() {
  
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LookAt::release_target() {
  // @@protoc_insertion_point(field_release:MessageContent.LookAt.target)
  
  return target_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LookAt::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.LookAt.target)
}

// float distance = 3;
inline void LookAt::clear_distance() {
  distance_ = 0;
}
inline float LookAt::_internal_distance() const {
  return distance_;
}
inline float LookAt::distance() const {
  // @@protoc_insertion_point(field_get:MessageContent.LookAt.distance)
  return _internal_distance();
}
inline void LookAt::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void LookAt::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:MessageContent.LookAt.distance)
}

// .MathMessage.Vector direction = 4;
inline bool LookAt::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool LookAt::has_direction() const {
  return _internal_has_direction();
}
inline const ::MathMessage::Vector& LookAt::_internal_direction() const {
  const ::MathMessage::Vector* p = direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vector*>(
      &::MathMessage::_Vector_default_instance_);
}
inline const ::MathMessage::Vector& LookAt::direction() const {
  // @@protoc_insertion_point(field_get:MessageContent.LookAt.direction)
  return _internal_direction();
}
inline ::MathMessage::Vector* LookAt::release_direction() {
  // @@protoc_insertion_point(field_release:MessageContent.LookAt.direction)
  
  ::MathMessage::Vector* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::MathMessage::Vector* LookAt::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vector>(GetArenaNoVirtual());
    direction_ = p;
  }
  return direction_;
}
inline ::MathMessage::Vector* LookAt::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:MessageContent.LookAt.direction)
  return _internal_mutable_direction();
}
inline void LookAt::set_allocated_direction(::MathMessage::Vector* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.LookAt.direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MessageContent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_basic_2eproto
