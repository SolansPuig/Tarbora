// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: math.proto

#include "math.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_math_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vec3_math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_math_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vec4_math_2eproto;
namespace MathMessage {
class Vec2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec2> _instance;
} _Vec2_default_instance_;
class Vec3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec3> _instance;
} _Vec3_default_instance_;
class Vec4DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec4> _instance;
} _Vec4_default_instance_;
class Mat3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mat3> _instance;
} _Mat3_default_instance_;
class Mat4DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mat4> _instance;
} _Mat4_default_instance_;
}  // namespace MathMessage
static void InitDefaultsVec2_math_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MathMessage::_Vec2_default_instance_;
    new (ptr) ::MathMessage::Vec2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MathMessage::Vec2::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vec2_math_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVec2_math_2eproto}, {}};

static void InitDefaultsVec3_math_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MathMessage::_Vec3_default_instance_;
    new (ptr) ::MathMessage::Vec3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MathMessage::Vec3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vec3_math_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVec3_math_2eproto}, {}};

static void InitDefaultsVec4_math_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MathMessage::_Vec4_default_instance_;
    new (ptr) ::MathMessage::Vec4();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MathMessage::Vec4::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vec4_math_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVec4_math_2eproto}, {}};

static void InitDefaultsMat3_math_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MathMessage::_Mat3_default_instance_;
    new (ptr) ::MathMessage::Mat3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MathMessage::Mat3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Mat3_math_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMat3_math_2eproto}, {
      &scc_info_Vec3_math_2eproto.base,}};

static void InitDefaultsMat4_math_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MathMessage::_Mat4_default_instance_;
    new (ptr) ::MathMessage::Mat4();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MathMessage::Mat4::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Mat4_math_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMat4_math_2eproto}, {
      &scc_info_Vec4_math_2eproto.base,}};

void InitDefaults_math_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Vec2_math_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vec3_math_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vec4_math_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mat3_math_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mat4_math_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_math_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_math_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_math_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_math_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec2, x_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec3, x_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec3, y_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec4, x_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec4, y_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec4, z_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Vec4, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Mat3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Mat3, x_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Mat3, y_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Mat3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Mat4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MathMessage::Mat4, x_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Mat4, y_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Mat4, z_),
  PROTOBUF_FIELD_OFFSET(::MathMessage::Mat4, w_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MathMessage::Vec2)},
  { 7, -1, sizeof(::MathMessage::Vec3)},
  { 15, -1, sizeof(::MathMessage::Vec4)},
  { 24, -1, sizeof(::MathMessage::Mat3)},
  { 32, -1, sizeof(::MathMessage::Mat4)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MathMessage::_Vec2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MathMessage::_Vec3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MathMessage::_Vec4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MathMessage::_Mat3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MathMessage::_Mat4_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_math_2eproto = {
  {}, AddDescriptors_math_2eproto, "math.proto", schemas,
  file_default_instances, TableStruct_math_2eproto::offsets,
  file_level_metadata_math_2eproto, 5, file_level_enum_descriptors_math_2eproto, file_level_service_descriptors_math_2eproto,
};

const char descriptor_table_protodef_math_2eproto[] =
  "\n\nmath.proto\022\013MathMessage\"\034\n\004Vec2\022\t\n\001x\030\001"
  " \001(\002\022\t\n\001y\030\002 \001(\002\"\'\n\004Vec3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030"
  "\002 \001(\002\022\t\n\001z\030\003 \001(\002\"2\n\004Vec4\022\t\n\001x\030\001 \001(\002\022\t\n\001y"
  "\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\"`\n\004Mat3\022\034\n\001"
  "x\030\001 \001(\0132\021.MathMessage.Vec3\022\034\n\001y\030\002 \001(\0132\021."
  "MathMessage.Vec3\022\034\n\001z\030\003 \001(\0132\021.MathMessag"
  "e.Vec3\"~\n\004Mat4\022\034\n\001x\030\001 \001(\0132\021.MathMessage."
  "Vec4\022\034\n\001y\030\002 \001(\0132\021.MathMessage.Vec4\022\034\n\001z\030"
  "\003 \001(\0132\021.MathMessage.Vec4\022\034\n\001w\030\004 \001(\0132\021.Ma"
  "thMessage.Vec4b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_math_2eproto = {
  false, InitDefaults_math_2eproto, 
  descriptor_table_protodef_math_2eproto,
  "math.proto", &assign_descriptors_table_math_2eproto, 382,
};

void AddDescriptors_math_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_math_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_math_2eproto = []() { AddDescriptors_math_2eproto(); return true; }();
namespace MathMessage {

// ===================================================================

void Vec2::InitAsDefaultInstance() {
}
class Vec2::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec2::kXFieldNumber;
const int Vec2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec2::Vec2()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MathMessage.Vec2)
}
Vec2::Vec2(const Vec2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:MathMessage.Vec2)
}

void Vec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:MathMessage.Vec2)
  SharedDtor();
}

void Vec2::SharedDtor() {
}

void Vec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2& Vec2::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Vec2_math_2eproto.base);
  return *internal_default_instance();
}


void Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:MathMessage.Vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vec2::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Vec2*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MathMessage.Vec2)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MathMessage.Vec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MathMessage.Vec2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MathMessage.Vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MathMessage.Vec2)
}

::google::protobuf::uint8* Vec2::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MathMessage.Vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MathMessage.Vec2)
  return target;
}

size_t Vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MathMessage.Vec2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MathMessage.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2* source =
      ::google::protobuf::DynamicCastToGenerated<Vec2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MathMessage.Vec2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MathMessage.Vec2)
    MergeFrom(*source);
  }
}

void Vec2::MergeFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MathMessage.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vec2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MathMessage.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2::CopyFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MathMessage.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  return true;
}

void Vec2::Swap(Vec2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec2::InternalSwap(Vec2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata Vec2::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_math_2eproto);
  return ::file_level_metadata_math_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Vec3::InitAsDefaultInstance() {
}
class Vec3::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec3::Vec3()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MathMessage.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:MathMessage.Vec3)
}

void Vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:MathMessage.Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
}

void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3& Vec3::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Vec3_math_2eproto.base);
  return *internal_default_instance();
}


void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:MathMessage.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vec3::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Vec3*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MathMessage.Vec3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MathMessage.Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MathMessage.Vec3)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MathMessage.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MathMessage.Vec3)
}

::google::protobuf::uint8* Vec3::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MathMessage.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MathMessage.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MathMessage.Vec3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MathMessage.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::google::protobuf::DynamicCastToGenerated<Vec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MathMessage.Vec3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MathMessage.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MathMessage.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MathMessage.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MathMessage.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_math_2eproto);
  return ::file_level_metadata_math_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Vec4::InitAsDefaultInstance() {
}
class Vec4::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec4::kXFieldNumber;
const int Vec4::kYFieldNumber;
const int Vec4::kZFieldNumber;
const int Vec4::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec4::Vec4()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MathMessage.Vec4)
}
Vec4::Vec4(const Vec4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:MathMessage.Vec4)
}

void Vec4::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Vec4::~Vec4() {
  // @@protoc_insertion_point(destructor:MathMessage.Vec4)
  SharedDtor();
}

void Vec4::SharedDtor() {
}

void Vec4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec4& Vec4::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Vec4_math_2eproto.base);
  return *internal_default_instance();
}


void Vec4::Clear() {
// @@protoc_insertion_point(message_clear_start:MathMessage.Vec4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vec4::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Vec4*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float w = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_w(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vec4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MathMessage.Vec4)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MathMessage.Vec4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MathMessage.Vec4)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vec4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MathMessage.Vec4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MathMessage.Vec4)
}

::google::protobuf::uint8* Vec4::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MathMessage.Vec4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MathMessage.Vec4)
  return target;
}

size_t Vec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MathMessage.Vec4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float w = 4;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MathMessage.Vec4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec4* source =
      ::google::protobuf::DynamicCastToGenerated<Vec4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MathMessage.Vec4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MathMessage.Vec4)
    MergeFrom(*source);
  }
}

void Vec4::MergeFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MathMessage.Vec4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Vec4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MathMessage.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec4::CopyFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MathMessage.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {
  return true;
}

void Vec4::Swap(Vec4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec4::InternalSwap(Vec4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
}

::google::protobuf::Metadata Vec4::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_math_2eproto);
  return ::file_level_metadata_math_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mat3::InitAsDefaultInstance() {
  ::MathMessage::_Mat3_default_instance_._instance.get_mutable()->x_ = const_cast< ::MathMessage::Vec3*>(
      ::MathMessage::Vec3::internal_default_instance());
  ::MathMessage::_Mat3_default_instance_._instance.get_mutable()->y_ = const_cast< ::MathMessage::Vec3*>(
      ::MathMessage::Vec3::internal_default_instance());
  ::MathMessage::_Mat3_default_instance_._instance.get_mutable()->z_ = const_cast< ::MathMessage::Vec3*>(
      ::MathMessage::Vec3::internal_default_instance());
}
class Mat3::HasBitSetters {
 public:
  static const ::MathMessage::Vec3& x(const Mat3* msg);
  static const ::MathMessage::Vec3& y(const Mat3* msg);
  static const ::MathMessage::Vec3& z(const Mat3* msg);
};

const ::MathMessage::Vec3&
Mat3::HasBitSetters::x(const Mat3* msg) {
  return *msg->x_;
}
const ::MathMessage::Vec3&
Mat3::HasBitSetters::y(const Mat3* msg) {
  return *msg->y_;
}
const ::MathMessage::Vec3&
Mat3::HasBitSetters::z(const Mat3* msg) {
  return *msg->z_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mat3::kXFieldNumber;
const int Mat3::kYFieldNumber;
const int Mat3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mat3::Mat3()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MathMessage.Mat3)
}
Mat3::Mat3(const Mat3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::MathMessage::Vec3(*from.x_);
  } else {
    x_ = nullptr;
  }
  if (from.has_y()) {
    y_ = new ::MathMessage::Vec3(*from.y_);
  } else {
    y_ = nullptr;
  }
  if (from.has_z()) {
    z_ = new ::MathMessage::Vec3(*from.z_);
  } else {
    z_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MathMessage.Mat3)
}

void Mat3::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mat3_math_2eproto.base);
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Mat3::~Mat3() {
  // @@protoc_insertion_point(destructor:MathMessage.Mat3)
  SharedDtor();
}

void Mat3::SharedDtor() {
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
}

void Mat3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mat3& Mat3::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mat3_math_2eproto.base);
  return *internal_default_instance();
}


void Mat3::Clear() {
// @@protoc_insertion_point(message_clear_start:MathMessage.Mat3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mat3::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mat3*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .MathMessage.Vec3 x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MathMessage::Vec3::_InternalParse;
        object = msg->mutable_x();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .MathMessage.Vec3 y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MathMessage::Vec3::_InternalParse;
        object = msg->mutable_y();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .MathMessage.Vec3 z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MathMessage::Vec3::_InternalParse;
        object = msg->mutable_z();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mat3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MathMessage.Mat3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MathMessage.Vec3 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MathMessage.Vec3 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MathMessage.Vec3 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MathMessage.Mat3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MathMessage.Mat3)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mat3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MathMessage.Mat3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MathMessage.Vec3 x = 1;
  if (this->has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::x(this), output);
  }

  // .MathMessage.Vec3 y = 2;
  if (this->has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::y(this), output);
  }

  // .MathMessage.Vec3 z = 3;
  if (this->has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::z(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MathMessage.Mat3)
}

::google::protobuf::uint8* Mat3::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MathMessage.Mat3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MathMessage.Vec3 x = 1;
  if (this->has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::x(this), target);
  }

  // .MathMessage.Vec3 y = 2;
  if (this->has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::y(this), target);
  }

  // .MathMessage.Vec3 z = 3;
  if (this->has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::z(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MathMessage.Mat3)
  return target;
}

size_t Mat3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MathMessage.Mat3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MathMessage.Vec3 x = 1;
  if (this->has_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .MathMessage.Vec3 y = 2;
  if (this->has_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *y_);
  }

  // .MathMessage.Vec3 z = 3;
  if (this->has_z()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *z_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mat3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MathMessage.Mat3)
  GOOGLE_DCHECK_NE(&from, this);
  const Mat3* source =
      ::google::protobuf::DynamicCastToGenerated<Mat3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MathMessage.Mat3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MathMessage.Mat3)
    MergeFrom(*source);
  }
}

void Mat3::MergeFrom(const Mat3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MathMessage.Mat3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    mutable_x()->::MathMessage::Vec3::MergeFrom(from.x());
  }
  if (from.has_y()) {
    mutable_y()->::MathMessage::Vec3::MergeFrom(from.y());
  }
  if (from.has_z()) {
    mutable_z()->::MathMessage::Vec3::MergeFrom(from.z());
  }
}

void Mat3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MathMessage.Mat3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mat3::CopyFrom(const Mat3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MathMessage.Mat3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mat3::IsInitialized() const {
  return true;
}

void Mat3::Swap(Mat3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mat3::InternalSwap(Mat3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata Mat3::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_math_2eproto);
  return ::file_level_metadata_math_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mat4::InitAsDefaultInstance() {
  ::MathMessage::_Mat4_default_instance_._instance.get_mutable()->x_ = const_cast< ::MathMessage::Vec4*>(
      ::MathMessage::Vec4::internal_default_instance());
  ::MathMessage::_Mat4_default_instance_._instance.get_mutable()->y_ = const_cast< ::MathMessage::Vec4*>(
      ::MathMessage::Vec4::internal_default_instance());
  ::MathMessage::_Mat4_default_instance_._instance.get_mutable()->z_ = const_cast< ::MathMessage::Vec4*>(
      ::MathMessage::Vec4::internal_default_instance());
  ::MathMessage::_Mat4_default_instance_._instance.get_mutable()->w_ = const_cast< ::MathMessage::Vec4*>(
      ::MathMessage::Vec4::internal_default_instance());
}
class Mat4::HasBitSetters {
 public:
  static const ::MathMessage::Vec4& x(const Mat4* msg);
  static const ::MathMessage::Vec4& y(const Mat4* msg);
  static const ::MathMessage::Vec4& z(const Mat4* msg);
  static const ::MathMessage::Vec4& w(const Mat4* msg);
};

const ::MathMessage::Vec4&
Mat4::HasBitSetters::x(const Mat4* msg) {
  return *msg->x_;
}
const ::MathMessage::Vec4&
Mat4::HasBitSetters::y(const Mat4* msg) {
  return *msg->y_;
}
const ::MathMessage::Vec4&
Mat4::HasBitSetters::z(const Mat4* msg) {
  return *msg->z_;
}
const ::MathMessage::Vec4&
Mat4::HasBitSetters::w(const Mat4* msg) {
  return *msg->w_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mat4::kXFieldNumber;
const int Mat4::kYFieldNumber;
const int Mat4::kZFieldNumber;
const int Mat4::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mat4::Mat4()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MathMessage.Mat4)
}
Mat4::Mat4(const Mat4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::MathMessage::Vec4(*from.x_);
  } else {
    x_ = nullptr;
  }
  if (from.has_y()) {
    y_ = new ::MathMessage::Vec4(*from.y_);
  } else {
    y_ = nullptr;
  }
  if (from.has_z()) {
    z_ = new ::MathMessage::Vec4(*from.z_);
  } else {
    z_ = nullptr;
  }
  if (from.has_w()) {
    w_ = new ::MathMessage::Vec4(*from.w_);
  } else {
    w_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MathMessage.Mat4)
}

void Mat4::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mat4_math_2eproto.base);
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Mat4::~Mat4() {
  // @@protoc_insertion_point(destructor:MathMessage.Mat4)
  SharedDtor();
}

void Mat4::SharedDtor() {
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
  if (this != internal_default_instance()) delete w_;
}

void Mat4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mat4& Mat4::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mat4_math_2eproto.base);
  return *internal_default_instance();
}


void Mat4::Clear() {
// @@protoc_insertion_point(message_clear_start:MathMessage.Mat4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mat4::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mat4*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .MathMessage.Vec4 x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MathMessage::Vec4::_InternalParse;
        object = msg->mutable_x();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .MathMessage.Vec4 y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MathMessage::Vec4::_InternalParse;
        object = msg->mutable_y();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .MathMessage.Vec4 z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MathMessage::Vec4::_InternalParse;
        object = msg->mutable_z();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .MathMessage.Vec4 w = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MathMessage::Vec4::_InternalParse;
        object = msg->mutable_w();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mat4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MathMessage.Mat4)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MathMessage.Vec4 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MathMessage.Vec4 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MathMessage.Vec4 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MathMessage.Vec4 w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_w()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MathMessage.Mat4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MathMessage.Mat4)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mat4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MathMessage.Mat4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MathMessage.Vec4 x = 1;
  if (this->has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::x(this), output);
  }

  // .MathMessage.Vec4 y = 2;
  if (this->has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::y(this), output);
  }

  // .MathMessage.Vec4 z = 3;
  if (this->has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::z(this), output);
  }

  // .MathMessage.Vec4 w = 4;
  if (this->has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::w(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MathMessage.Mat4)
}

::google::protobuf::uint8* Mat4::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MathMessage.Mat4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MathMessage.Vec4 x = 1;
  if (this->has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::x(this), target);
  }

  // .MathMessage.Vec4 y = 2;
  if (this->has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::y(this), target);
  }

  // .MathMessage.Vec4 z = 3;
  if (this->has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::z(this), target);
  }

  // .MathMessage.Vec4 w = 4;
  if (this->has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::w(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MathMessage.Mat4)
  return target;
}

size_t Mat4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MathMessage.Mat4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MathMessage.Vec4 x = 1;
  if (this->has_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .MathMessage.Vec4 y = 2;
  if (this->has_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *y_);
  }

  // .MathMessage.Vec4 z = 3;
  if (this->has_z()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *z_);
  }

  // .MathMessage.Vec4 w = 4;
  if (this->has_w()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *w_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mat4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MathMessage.Mat4)
  GOOGLE_DCHECK_NE(&from, this);
  const Mat4* source =
      ::google::protobuf::DynamicCastToGenerated<Mat4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MathMessage.Mat4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MathMessage.Mat4)
    MergeFrom(*source);
  }
}

void Mat4::MergeFrom(const Mat4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MathMessage.Mat4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    mutable_x()->::MathMessage::Vec4::MergeFrom(from.x());
  }
  if (from.has_y()) {
    mutable_y()->::MathMessage::Vec4::MergeFrom(from.y());
  }
  if (from.has_z()) {
    mutable_z()->::MathMessage::Vec4::MergeFrom(from.z());
  }
  if (from.has_w()) {
    mutable_w()->::MathMessage::Vec4::MergeFrom(from.w());
  }
}

void Mat4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MathMessage.Mat4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mat4::CopyFrom(const Mat4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MathMessage.Mat4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mat4::IsInitialized() const {
  return true;
}

void Mat4::Swap(Mat4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mat4::InternalSwap(Mat4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
}

::google::protobuf::Metadata Mat4::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_math_2eproto);
  return ::file_level_metadata_math_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MathMessage
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::MathMessage::Vec2* Arena::CreateMaybeMessage< ::MathMessage::Vec2 >(Arena* arena) {
  return Arena::CreateInternal< ::MathMessage::Vec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::MathMessage::Vec3* Arena::CreateMaybeMessage< ::MathMessage::Vec3 >(Arena* arena) {
  return Arena::CreateInternal< ::MathMessage::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::MathMessage::Vec4* Arena::CreateMaybeMessage< ::MathMessage::Vec4 >(Arena* arena) {
  return Arena::CreateInternal< ::MathMessage::Vec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::MathMessage::Mat3* Arena::CreateMaybeMessage< ::MathMessage::Mat3 >(Arena* arena) {
  return Arena::CreateInternal< ::MathMessage::Mat3 >(arena);
}
template<> PROTOBUF_NOINLINE ::MathMessage::Mat4* Arena::CreateMaybeMessage< ::MathMessage::Mat4 >(Arena* arena) {
  return Arena::CreateInternal< ::MathMessage::Mat4 >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
