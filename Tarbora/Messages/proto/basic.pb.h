// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basic.proto

#ifndef PROTOBUF_INCLUDED_basic_2eproto
#define PROTOBUF_INCLUDED_basic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_basic_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_basic_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_basic_2eproto();
namespace MessageContent {
class Actor;
class ActorDefaultTypeInternal;
extern ActorDefaultTypeInternal _Actor_default_instance_;
class ApplyPhysics;
class ApplyPhysicsDefaultTypeInternal;
extern ApplyPhysicsDefaultTypeInternal _ApplyPhysics_default_instance_;
class CreateActor;
class CreateActorDefaultTypeInternal;
extern CreateActorDefaultTypeInternal _CreateActor_default_instance_;
class LookAt;
class LookAtDefaultTypeInternal;
extern LookAtDefaultTypeInternal _LookAt_default_instance_;
class MoveActor;
class MoveActorDefaultTypeInternal;
extern MoveActorDefaultTypeInternal _MoveActor_default_instance_;
class MoveNode;
class MoveNodeDefaultTypeInternal;
extern MoveNodeDefaultTypeInternal _MoveNode_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class SetAnimation;
class SetAnimationDefaultTypeInternal;
extern SetAnimationDefaultTypeInternal _SetAnimation_default_instance_;
}  // namespace MessageContent
namespace google {
namespace protobuf {
template<> ::MessageContent::Actor* Arena::CreateMaybeMessage<::MessageContent::Actor>(Arena*);
template<> ::MessageContent::ApplyPhysics* Arena::CreateMaybeMessage<::MessageContent::ApplyPhysics>(Arena*);
template<> ::MessageContent::CreateActor* Arena::CreateMaybeMessage<::MessageContent::CreateActor>(Arena*);
template<> ::MessageContent::LookAt* Arena::CreateMaybeMessage<::MessageContent::LookAt>(Arena*);
template<> ::MessageContent::MoveActor* Arena::CreateMaybeMessage<::MessageContent::MoveActor>(Arena*);
template<> ::MessageContent::MoveNode* Arena::CreateMaybeMessage<::MessageContent::MoveNode>(Arena*);
template<> ::MessageContent::Node* Arena::CreateMaybeMessage<::MessageContent::Node>(Arena*);
template<> ::MessageContent::SetAnimation* Arena::CreateMaybeMessage<::MessageContent::SetAnimation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MessageContent {

// ===================================================================

class Actor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageContent.Actor) */ {
 public:
  Actor();
  virtual ~Actor();

  Actor(const Actor& from);

  inline Actor& operator=(const Actor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Actor(Actor&& from) noexcept
    : Actor() {
    *this = ::std::move(from);
  }

  inline Actor& operator=(Actor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Actor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Actor* internal_default_instance() {
    return reinterpret_cast<const Actor*>(
               &_Actor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Actor* other);
  friend void swap(Actor& a, Actor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Actor* New() const final {
    return CreateMaybeMessage<Actor>(nullptr);
  }

  Actor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Actor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Actor& from);
  void MergeFrom(const Actor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:MessageContent.Actor)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageContent.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MessageContent.Node)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class CreateActor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageContent.CreateActor) */ {
 public:
  CreateActor();
  virtual ~CreateActor();

  CreateActor(const CreateActor& from);

  inline CreateActor& operator=(const CreateActor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateActor(CreateActor&& from) noexcept
    : CreateActor() {
    *this = ::std::move(from);
  }

  inline CreateActor& operator=(CreateActor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateActor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateActor* internal_default_instance() {
    return reinterpret_cast<const CreateActor*>(
               &_CreateActor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateActor* other);
  friend void swap(CreateActor& a, CreateActor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateActor* New() const final {
    return CreateMaybeMessage<CreateActor>(nullptr);
  }

  CreateActor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateActor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateActor& from);
  void MergeFrom(const CreateActor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateActor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string entity = 2;
  void clear_entity();
  static const int kEntityFieldNumber = 2;
  const ::std::string& entity() const;
  void set_entity(const ::std::string& value);
  #if LANG_CXX11
  void set_entity(::std::string&& value);
  #endif
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  ::std::string* mutable_entity();
  ::std::string* release_entity();
  void set_allocated_entity(::std::string* entity);

  // string variant = 3;
  void clear_variant();
  static const int kVariantFieldNumber = 3;
  const ::std::string& variant() const;
  void set_variant(const ::std::string& value);
  #if LANG_CXX11
  void set_variant(::std::string&& value);
  #endif
  void set_variant(const char* value);
  void set_variant(const char* value, size_t size);
  ::std::string* mutable_variant();
  ::std::string* release_variant();
  void set_allocated_variant(::std::string* variant);

  // .MathMessage.Vec3 position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  const ::MathMessage::Vec3& position() const;
  ::MathMessage::Vec3* release_position();
  ::MathMessage::Vec3* mutable_position();
  void set_allocated_position(::MathMessage::Vec3* position);

  // .MathMessage.Vec3 rotation = 5;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  const ::MathMessage::Vec3& rotation() const;
  ::MathMessage::Vec3* release_rotation();
  ::MathMessage::Vec3* mutable_rotation();
  void set_allocated_rotation(::MathMessage::Vec3* rotation);

  // @@protoc_insertion_point(class_scope:MessageContent.CreateActor)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr entity_;
  ::google::protobuf::internal::ArenaStringPtr variant_;
  ::MathMessage::Vec3* position_;
  ::MathMessage::Vec3* rotation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class MoveActor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageContent.MoveActor) */ {
 public:
  MoveActor();
  virtual ~MoveActor();

  MoveActor(const MoveActor& from);

  inline MoveActor& operator=(const MoveActor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveActor(MoveActor&& from) noexcept
    : MoveActor() {
    *this = ::std::move(from);
  }

  inline MoveActor& operator=(MoveActor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MoveActor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveActor* internal_default_instance() {
    return reinterpret_cast<const MoveActor*>(
               &_MoveActor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MoveActor* other);
  friend void swap(MoveActor& a, MoveActor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveActor* New() const final {
    return CreateMaybeMessage<MoveActor>(nullptr);
  }

  MoveActor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveActor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveActor& from);
  void MergeFrom(const MoveActor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveActor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .MathMessage.Vec3 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::MathMessage::Vec3& position() const;
  ::MathMessage::Vec3* release_position();
  ::MathMessage::Vec3* mutable_position();
  void set_allocated_position(::MathMessage::Vec3* position);

  // .MathMessage.Mat3 rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  const ::MathMessage::Mat3& rotation() const;
  ::MathMessage::Mat3* release_rotation();
  ::MathMessage::Mat3* mutable_rotation();
  void set_allocated_rotation(::MathMessage::Mat3* rotation);

  // @@protoc_insertion_point(class_scope:MessageContent.MoveActor)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::MathMessage::Vec3* position_;
  ::MathMessage::Mat3* rotation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class MoveNode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageContent.MoveNode) */ {
 public:
  MoveNode();
  virtual ~MoveNode();

  MoveNode(const MoveNode& from);

  inline MoveNode& operator=(const MoveNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveNode(MoveNode&& from) noexcept
    : MoveNode() {
    *this = ::std::move(from);
  }

  inline MoveNode& operator=(MoveNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MoveNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveNode* internal_default_instance() {
    return reinterpret_cast<const MoveNode*>(
               &_MoveNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MoveNode* other);
  friend void swap(MoveNode& a, MoveNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveNode* New() const final {
    return CreateMaybeMessage<MoveNode>(nullptr);
  }

  MoveNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveNode& from);
  void MergeFrom(const MoveNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .MathMessage.Vec3 position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::MathMessage::Vec3& position() const;
  ::MathMessage::Vec3* release_position();
  ::MathMessage::Vec3* mutable_position();
  void set_allocated_position(::MathMessage::Vec3* position);

  // .MathMessage.Vec3 rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  const ::MathMessage::Vec3& rotation() const;
  ::MathMessage::Vec3* release_rotation();
  ::MathMessage::Vec3* mutable_rotation();
  void set_allocated_rotation(::MathMessage::Vec3* rotation);

  // @@protoc_insertion_point(class_scope:MessageContent.MoveNode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::MathMessage::Vec3* position_;
  ::MathMessage::Vec3* rotation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class SetAnimation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageContent.SetAnimation) */ {
 public:
  SetAnimation();
  virtual ~SetAnimation();

  SetAnimation(const SetAnimation& from);

  inline SetAnimation& operator=(const SetAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetAnimation(SetAnimation&& from) noexcept
    : SetAnimation() {
    *this = ::std::move(from);
  }

  inline SetAnimation& operator=(SetAnimation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetAnimation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAnimation* internal_default_instance() {
    return reinterpret_cast<const SetAnimation*>(
               &_SetAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SetAnimation* other);
  friend void swap(SetAnimation& a, SetAnimation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAnimation* New() const final {
    return CreateMaybeMessage<SetAnimation>(nullptr);
  }

  SetAnimation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetAnimation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetAnimation& from);
  void MergeFrom(const SetAnimation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAnimation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string animation = 2;
  void clear_animation();
  static const int kAnimationFieldNumber = 2;
  const ::std::string& animation() const;
  void set_animation(const ::std::string& value);
  #if LANG_CXX11
  void set_animation(::std::string&& value);
  #endif
  void set_animation(const char* value);
  void set_animation(const char* value, size_t size);
  ::std::string* mutable_animation();
  ::std::string* release_animation();
  void set_allocated_animation(::std::string* animation);

  // string file = 3;
  void clear_file();
  static const int kFileFieldNumber = 3;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // float speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:MessageContent.SetAnimation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr animation_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  float speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class ApplyPhysics final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageContent.ApplyPhysics) */ {
 public:
  ApplyPhysics();
  virtual ~ApplyPhysics();

  ApplyPhysics(const ApplyPhysics& from);

  inline ApplyPhysics& operator=(const ApplyPhysics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApplyPhysics(ApplyPhysics&& from) noexcept
    : ApplyPhysics() {
    *this = ::std::move(from);
  }

  inline ApplyPhysics& operator=(ApplyPhysics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ApplyPhysics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyPhysics* internal_default_instance() {
    return reinterpret_cast<const ApplyPhysics*>(
               &_ApplyPhysics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ApplyPhysics* other);
  friend void swap(ApplyPhysics& a, ApplyPhysics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApplyPhysics* New() const final {
    return CreateMaybeMessage<ApplyPhysics>(nullptr);
  }

  ApplyPhysics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ApplyPhysics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ApplyPhysics& from);
  void MergeFrom(const ApplyPhysics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyPhysics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .MathMessage.Vec3 direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  const ::MathMessage::Vec3& direction() const;
  ::MathMessage::Vec3* release_direction();
  ::MathMessage::Vec3* mutable_direction();
  void set_allocated_direction(::MathMessage::Vec3* direction);

  // float magnitude = 2;
  void clear_magnitude();
  static const int kMagnitudeFieldNumber = 2;
  float magnitude() const;
  void set_magnitude(float value);

  // @@protoc_insertion_point(class_scope:MessageContent.ApplyPhysics)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::MathMessage::Vec3* direction_;
  float magnitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class LookAt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageContent.LookAt) */ {
 public:
  LookAt();
  virtual ~LookAt();

  LookAt(const LookAt& from);

  inline LookAt& operator=(const LookAt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LookAt(LookAt&& from) noexcept
    : LookAt() {
    *this = ::std::move(from);
  }

  inline LookAt& operator=(LookAt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LookAt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookAt* internal_default_instance() {
    return reinterpret_cast<const LookAt*>(
               &_LookAt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LookAt* other);
  friend void swap(LookAt& a, LookAt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LookAt* New() const final {
    return CreateMaybeMessage<LookAt>(nullptr);
  }

  LookAt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LookAt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LookAt& from);
  void MergeFrom(const LookAt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookAt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string target = 2;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // .MathMessage.Vec3 direction = 4;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  const ::MathMessage::Vec3& direction() const;
  ::MathMessage::Vec3* release_direction();
  ::MathMessage::Vec3* mutable_direction();
  void set_allocated_direction(::MathMessage::Vec3* direction);

  // float distance = 3;
  void clear_distance();
  static const int kDistanceFieldNumber = 3;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:MessageContent.LookAt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  ::MathMessage::Vec3* direction_;
  float distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Actor

// string id = 1;
inline void Actor::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Actor::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.Actor.id)
  return id_.GetNoArena();
}
inline void Actor::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.Actor.id)
}
#if LANG_CXX11
inline void Actor::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.Actor.id)
}
#endif
inline void Actor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.Actor.id)
}
inline void Actor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.Actor.id)
}
inline ::std::string* Actor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.Actor.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Actor::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.Actor.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Actor::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.Actor.id)
}

// -------------------------------------------------------------------

// Node

// string id = 1;
inline void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.Node.id)
  return id_.GetNoArena();
}
inline void Node::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.Node.id)
}
#if LANG_CXX11
inline void Node::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.Node.id)
}
#endif
inline void Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.Node.id)
}
inline void Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.Node.id)
}
inline ::std::string* Node::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.Node.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.Node.id)
}

// string name = 2;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:MessageContent.Node.name)
  return name_.GetNoArena();
}
inline void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.Node.name)
}
#if LANG_CXX11
inline void Node::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.Node.name)
}
#endif
inline void Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.Node.name)
}
inline ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:MessageContent.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.Node.name)
}

// -------------------------------------------------------------------

// CreateActor

// string id = 1;
inline void CreateActor::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateActor::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.id)
  return id_.GetNoArena();
}
inline void CreateActor::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActor.id)
}
#if LANG_CXX11
inline void CreateActor::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.CreateActor.id)
}
#endif
inline void CreateActor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.CreateActor.id)
}
inline void CreateActor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.CreateActor.id)
}
inline ::std::string* CreateActor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateActor::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActor::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.id)
}

// string entity = 2;
inline void CreateActor::clear_entity() {
  entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateActor::entity() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.entity)
  return entity_.GetNoArena();
}
inline void CreateActor::set_entity(const ::std::string& value) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActor.entity)
}
#if LANG_CXX11
inline void CreateActor::set_entity(::std::string&& value) {
  
  entity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.CreateActor.entity)
}
#endif
inline void CreateActor::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.CreateActor.entity)
}
inline void CreateActor::set_entity(const char* value, size_t size) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.CreateActor.entity)
}
inline ::std::string* CreateActor::mutable_entity() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.entity)
  return entity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateActor::release_entity() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.entity)
  
  return entity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActor::set_allocated_entity(::std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.entity)
}

// string variant = 3;
inline void CreateActor::clear_variant() {
  variant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateActor::variant() const {
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.variant)
  return variant_.GetNoArena();
}
inline void CreateActor::set_variant(const ::std::string& value) {
  
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.CreateActor.variant)
}
#if LANG_CXX11
inline void CreateActor::set_variant(::std::string&& value) {
  
  variant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.CreateActor.variant)
}
#endif
inline void CreateActor::set_variant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.CreateActor.variant)
}
inline void CreateActor::set_variant(const char* value, size_t size) {
  
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.CreateActor.variant)
}
inline ::std::string* CreateActor::mutable_variant() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.variant)
  return variant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateActor::release_variant() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.variant)
  
  return variant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActor::set_allocated_variant(::std::string* variant) {
  if (variant != nullptr) {
    
  } else {
    
  }
  variant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.variant)
}

// .MathMessage.Vec3 position = 4;
inline bool CreateActor::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::MathMessage::Vec3& CreateActor::position() const {
  const ::MathMessage::Vec3* p = position_;
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* CreateActor::release_position() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.position)
  
  ::MathMessage::Vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* CreateActor::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.position)
  return position_;
}
inline void CreateActor::set_allocated_position(::MathMessage::Vec3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.position)
}

// .MathMessage.Vec3 rotation = 5;
inline bool CreateActor::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::MathMessage::Vec3& CreateActor::rotation() const {
  const ::MathMessage::Vec3* p = rotation_;
  // @@protoc_insertion_point(field_get:MessageContent.CreateActor.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* CreateActor::release_rotation() {
  // @@protoc_insertion_point(field_release:MessageContent.CreateActor.rotation)
  
  ::MathMessage::Vec3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* CreateActor::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MessageContent.CreateActor.rotation)
  return rotation_;
}
inline void CreateActor::set_allocated_rotation(::MathMessage::Vec3* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.CreateActor.rotation)
}

// -------------------------------------------------------------------

// MoveActor

// string id = 1;
inline void MoveActor::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoveActor::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveActor.id)
  return id_.GetNoArena();
}
inline void MoveActor::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.MoveActor.id)
}
#if LANG_CXX11
inline void MoveActor::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.MoveActor.id)
}
#endif
inline void MoveActor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.MoveActor.id)
}
inline void MoveActor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.MoveActor.id)
}
inline ::std::string* MoveActor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveActor.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveActor::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveActor.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveActor::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveActor.id)
}

// .MathMessage.Vec3 position = 2;
inline bool MoveActor::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::MathMessage::Vec3& MoveActor::position() const {
  const ::MathMessage::Vec3* p = position_;
  // @@protoc_insertion_point(field_get:MessageContent.MoveActor.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* MoveActor::release_position() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveActor.position)
  
  ::MathMessage::Vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* MoveActor::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveActor.position)
  return position_;
}
inline void MoveActor::set_allocated_position(::MathMessage::Vec3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveActor.position)
}

// .MathMessage.Mat3 rotation = 3;
inline bool MoveActor::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::MathMessage::Mat3& MoveActor::rotation() const {
  const ::MathMessage::Mat3* p = rotation_;
  // @@protoc_insertion_point(field_get:MessageContent.MoveActor.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Mat3*>(
      &::MathMessage::_Mat3_default_instance_);
}
inline ::MathMessage::Mat3* MoveActor::release_rotation() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveActor.rotation)
  
  ::MathMessage::Mat3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::MathMessage::Mat3* MoveActor::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Mat3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveActor.rotation)
  return rotation_;
}
inline void MoveActor::set_allocated_rotation(::MathMessage::Mat3* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveActor.rotation)
}

// -------------------------------------------------------------------

// MoveNode

// string id = 1;
inline void MoveNode::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoveNode::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveNode.id)
  return id_.GetNoArena();
}
inline void MoveNode::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.MoveNode.id)
}
#if LANG_CXX11
inline void MoveNode::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.MoveNode.id)
}
#endif
inline void MoveNode::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.MoveNode.id)
}
inline void MoveNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.MoveNode.id)
}
inline ::std::string* MoveNode::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveNode.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveNode::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveNode.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveNode::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveNode.id)
}

// string name = 2;
inline void MoveNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoveNode::name() const {
  // @@protoc_insertion_point(field_get:MessageContent.MoveNode.name)
  return name_.GetNoArena();
}
inline void MoveNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.MoveNode.name)
}
#if LANG_CXX11
inline void MoveNode::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.MoveNode.name)
}
#endif
inline void MoveNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.MoveNode.name)
}
inline void MoveNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.MoveNode.name)
}
inline ::std::string* MoveNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveNode::release_name() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveNode.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveNode::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveNode.name)
}

// .MathMessage.Vec3 position = 3;
inline bool MoveNode::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::MathMessage::Vec3& MoveNode::position() const {
  const ::MathMessage::Vec3* p = position_;
  // @@protoc_insertion_point(field_get:MessageContent.MoveNode.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* MoveNode::release_position() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveNode.position)
  
  ::MathMessage::Vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* MoveNode::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveNode.position)
  return position_;
}
inline void MoveNode::set_allocated_position(::MathMessage::Vec3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveNode.position)
}

// .MathMessage.Vec3 rotation = 4;
inline bool MoveNode::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::MathMessage::Vec3& MoveNode::rotation() const {
  const ::MathMessage::Vec3* p = rotation_;
  // @@protoc_insertion_point(field_get:MessageContent.MoveNode.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* MoveNode::release_rotation() {
  // @@protoc_insertion_point(field_release:MessageContent.MoveNode.rotation)
  
  ::MathMessage::Vec3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* MoveNode::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MessageContent.MoveNode.rotation)
  return rotation_;
}
inline void MoveNode::set_allocated_rotation(::MathMessage::Vec3* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.MoveNode.rotation)
}

// -------------------------------------------------------------------

// SetAnimation

// string id = 1;
inline void SetAnimation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAnimation::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.SetAnimation.id)
  return id_.GetNoArena();
}
inline void SetAnimation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.SetAnimation.id)
}
#if LANG_CXX11
inline void SetAnimation::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.SetAnimation.id)
}
#endif
inline void SetAnimation::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.SetAnimation.id)
}
inline void SetAnimation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.SetAnimation.id)
}
inline ::std::string* SetAnimation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.SetAnimation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAnimation::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.SetAnimation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAnimation::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.SetAnimation.id)
}

// string animation = 2;
inline void SetAnimation::clear_animation() {
  animation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAnimation::animation() const {
  // @@protoc_insertion_point(field_get:MessageContent.SetAnimation.animation)
  return animation_.GetNoArena();
}
inline void SetAnimation::set_animation(const ::std::string& value) {
  
  animation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.SetAnimation.animation)
}
#if LANG_CXX11
inline void SetAnimation::set_animation(::std::string&& value) {
  
  animation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.SetAnimation.animation)
}
#endif
inline void SetAnimation::set_animation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  animation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.SetAnimation.animation)
}
inline void SetAnimation::set_animation(const char* value, size_t size) {
  
  animation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.SetAnimation.animation)
}
inline ::std::string* SetAnimation::mutable_animation() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.SetAnimation.animation)
  return animation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAnimation::release_animation() {
  // @@protoc_insertion_point(field_release:MessageContent.SetAnimation.animation)
  
  return animation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAnimation::set_allocated_animation(::std::string* animation) {
  if (animation != nullptr) {
    
  } else {
    
  }
  animation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), animation);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.SetAnimation.animation)
}

// string file = 3;
inline void SetAnimation::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAnimation::file() const {
  // @@protoc_insertion_point(field_get:MessageContent.SetAnimation.file)
  return file_.GetNoArena();
}
inline void SetAnimation::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.SetAnimation.file)
}
#if LANG_CXX11
inline void SetAnimation::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.SetAnimation.file)
}
#endif
inline void SetAnimation::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.SetAnimation.file)
}
inline void SetAnimation::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.SetAnimation.file)
}
inline ::std::string* SetAnimation::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.SetAnimation.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAnimation::release_file() {
  // @@protoc_insertion_point(field_release:MessageContent.SetAnimation.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAnimation::set_allocated_file(::std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.SetAnimation.file)
}

// float speed = 4;
inline void SetAnimation::clear_speed() {
  speed_ = 0;
}
inline float SetAnimation::speed() const {
  // @@protoc_insertion_point(field_get:MessageContent.SetAnimation.speed)
  return speed_;
}
inline void SetAnimation::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:MessageContent.SetAnimation.speed)
}

// -------------------------------------------------------------------

// ApplyPhysics

// string id = 1;
inline void ApplyPhysics::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyPhysics::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.ApplyPhysics.id)
  return id_.GetNoArena();
}
inline void ApplyPhysics::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.ApplyPhysics.id)
}
#if LANG_CXX11
inline void ApplyPhysics::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.ApplyPhysics.id)
}
#endif
inline void ApplyPhysics::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.ApplyPhysics.id)
}
inline void ApplyPhysics::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.ApplyPhysics.id)
}
inline ::std::string* ApplyPhysics::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.ApplyPhysics.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyPhysics::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.ApplyPhysics.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyPhysics::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.ApplyPhysics.id)
}

// float magnitude = 2;
inline void ApplyPhysics::clear_magnitude() {
  magnitude_ = 0;
}
inline float ApplyPhysics::magnitude() const {
  // @@protoc_insertion_point(field_get:MessageContent.ApplyPhysics.magnitude)
  return magnitude_;
}
inline void ApplyPhysics::set_magnitude(float value) {
  
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:MessageContent.ApplyPhysics.magnitude)
}

// .MathMessage.Vec3 direction = 3;
inline bool ApplyPhysics::has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline const ::MathMessage::Vec3& ApplyPhysics::direction() const {
  const ::MathMessage::Vec3* p = direction_;
  // @@protoc_insertion_point(field_get:MessageContent.ApplyPhysics.direction)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* ApplyPhysics::release_direction() {
  // @@protoc_insertion_point(field_release:MessageContent.ApplyPhysics.direction)
  
  ::MathMessage::Vec3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* ApplyPhysics::mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MessageContent.ApplyPhysics.direction)
  return direction_;
}
inline void ApplyPhysics::set_allocated_direction(::MathMessage::Vec3* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.ApplyPhysics.direction)
}

// -------------------------------------------------------------------

// LookAt

// string id = 1;
inline void LookAt::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LookAt::id() const {
  // @@protoc_insertion_point(field_get:MessageContent.LookAt.id)
  return id_.GetNoArena();
}
inline void LookAt::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.LookAt.id)
}
#if LANG_CXX11
inline void LookAt::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.LookAt.id)
}
#endif
inline void LookAt::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.LookAt.id)
}
inline void LookAt::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.LookAt.id)
}
inline ::std::string* LookAt::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.LookAt.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LookAt::release_id() {
  // @@protoc_insertion_point(field_release:MessageContent.LookAt.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LookAt::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.LookAt.id)
}

// string target = 2;
inline void LookAt::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LookAt::target() const {
  // @@protoc_insertion_point(field_get:MessageContent.LookAt.target)
  return target_.GetNoArena();
}
inline void LookAt::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageContent.LookAt.target)
}
#if LANG_CXX11
inline void LookAt::set_target(::std::string&& value) {
  
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageContent.LookAt.target)
}
#endif
inline void LookAt::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageContent.LookAt.target)
}
inline void LookAt::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageContent.LookAt.target)
}
inline ::std::string* LookAt::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:MessageContent.LookAt.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LookAt::release_target() {
  // @@protoc_insertion_point(field_release:MessageContent.LookAt.target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LookAt::set_allocated_target(::std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:MessageContent.LookAt.target)
}

// float distance = 3;
inline void LookAt::clear_distance() {
  distance_ = 0;
}
inline float LookAt::distance() const {
  // @@protoc_insertion_point(field_get:MessageContent.LookAt.distance)
  return distance_;
}
inline void LookAt::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:MessageContent.LookAt.distance)
}

// .MathMessage.Vec3 direction = 4;
inline bool LookAt::has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline const ::MathMessage::Vec3& LookAt::direction() const {
  const ::MathMessage::Vec3* p = direction_;
  // @@protoc_insertion_point(field_get:MessageContent.LookAt.direction)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* LookAt::release_direction() {
  // @@protoc_insertion_point(field_release:MessageContent.LookAt.direction)
  
  ::MathMessage::Vec3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* LookAt::mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MessageContent.LookAt.direction)
  return direction_;
}
inline void LookAt::set_allocated_direction(::MathMessage::Vec3* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:MessageContent.LookAt.direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MessageContent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_basic_2eproto
