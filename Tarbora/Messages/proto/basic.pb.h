// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basic.proto

#ifndef PROTOBUF_INCLUDED_basic_2eproto
#define PROTOBUF_INCLUDED_basic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_basic_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_basic_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_basic_2eproto();
namespace tbBasics {
class ApplyPhysicsBody;
class ApplyPhysicsBodyDefaultTypeInternal;
extern ApplyPhysicsBodyDefaultTypeInternal _ApplyPhysicsBody_default_instance_;
class CreateActorBody;
class CreateActorBodyDefaultTypeInternal;
extern CreateActorBodyDefaultTypeInternal _CreateActorBody_default_instance_;
class DeleteActorBody;
class DeleteActorBodyDefaultTypeInternal;
extern DeleteActorBodyDefaultTypeInternal _DeleteActorBody_default_instance_;
class LookAtBody;
class LookAtBodyDefaultTypeInternal;
extern LookAtBodyDefaultTypeInternal _LookAtBody_default_instance_;
class LookDirectionBody;
class LookDirectionBodyDefaultTypeInternal;
extern LookDirectionBodyDefaultTypeInternal _LookDirectionBody_default_instance_;
class MoveActorBody;
class MoveActorBodyDefaultTypeInternal;
extern MoveActorBodyDefaultTypeInternal _MoveActorBody_default_instance_;
class MoveNodeBody;
class MoveNodeBodyDefaultTypeInternal;
extern MoveNodeBodyDefaultTypeInternal _MoveNodeBody_default_instance_;
class SetActorAnimationBody;
class SetActorAnimationBodyDefaultTypeInternal;
extern SetActorAnimationBodyDefaultTypeInternal _SetActorAnimationBody_default_instance_;
class SetCameraBody;
class SetCameraBodyDefaultTypeInternal;
extern SetCameraBodyDefaultTypeInternal _SetCameraBody_default_instance_;
}  // namespace tbBasics
namespace google {
namespace protobuf {
template<> ::tbBasics::ApplyPhysicsBody* Arena::CreateMaybeMessage<::tbBasics::ApplyPhysicsBody>(Arena*);
template<> ::tbBasics::CreateActorBody* Arena::CreateMaybeMessage<::tbBasics::CreateActorBody>(Arena*);
template<> ::tbBasics::DeleteActorBody* Arena::CreateMaybeMessage<::tbBasics::DeleteActorBody>(Arena*);
template<> ::tbBasics::LookAtBody* Arena::CreateMaybeMessage<::tbBasics::LookAtBody>(Arena*);
template<> ::tbBasics::LookDirectionBody* Arena::CreateMaybeMessage<::tbBasics::LookDirectionBody>(Arena*);
template<> ::tbBasics::MoveActorBody* Arena::CreateMaybeMessage<::tbBasics::MoveActorBody>(Arena*);
template<> ::tbBasics::MoveNodeBody* Arena::CreateMaybeMessage<::tbBasics::MoveNodeBody>(Arena*);
template<> ::tbBasics::SetActorAnimationBody* Arena::CreateMaybeMessage<::tbBasics::SetActorAnimationBody>(Arena*);
template<> ::tbBasics::SetCameraBody* Arena::CreateMaybeMessage<::tbBasics::SetCameraBody>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tbBasics {

// ===================================================================

class CreateActorBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.CreateActorBody) */ {
 public:
  CreateActorBody();
  virtual ~CreateActorBody();

  CreateActorBody(const CreateActorBody& from);

  inline CreateActorBody& operator=(const CreateActorBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateActorBody(CreateActorBody&& from) noexcept
    : CreateActorBody() {
    *this = ::std::move(from);
  }

  inline CreateActorBody& operator=(CreateActorBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateActorBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateActorBody* internal_default_instance() {
    return reinterpret_cast<const CreateActorBody*>(
               &_CreateActorBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateActorBody* other);
  friend void swap(CreateActorBody& a, CreateActorBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateActorBody* New() const final {
    return CreateMaybeMessage<CreateActorBody>(nullptr);
  }

  CreateActorBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateActorBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateActorBody& from);
  void MergeFrom(const CreateActorBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateActorBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string entity = 2;
  void clear_entity();
  static const int kEntityFieldNumber = 2;
  const ::std::string& entity() const;
  void set_entity(const ::std::string& value);
  #if LANG_CXX11
  void set_entity(::std::string&& value);
  #endif
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  ::std::string* mutable_entity();
  ::std::string* release_entity();
  void set_allocated_entity(::std::string* entity);

  // string variant = 3;
  void clear_variant();
  static const int kVariantFieldNumber = 3;
  const ::std::string& variant() const;
  void set_variant(const ::std::string& value);
  #if LANG_CXX11
  void set_variant(::std::string&& value);
  #endif
  void set_variant(const char* value);
  void set_variant(const char* value, size_t size);
  ::std::string* mutable_variant();
  ::std::string* release_variant();
  void set_allocated_variant(::std::string* variant);

  // .tbMath.Vec3Message position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  const ::tbMath::Vec3Message& position() const;
  ::tbMath::Vec3Message* release_position();
  ::tbMath::Vec3Message* mutable_position();
  void set_allocated_position(::tbMath::Vec3Message* position);

  // .tbMath.Vec3Message rotation = 5;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  const ::tbMath::Vec3Message& rotation() const;
  ::tbMath::Vec3Message* release_rotation();
  ::tbMath::Vec3Message* mutable_rotation();
  void set_allocated_rotation(::tbMath::Vec3Message* rotation);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.CreateActorBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr entity_;
  ::google::protobuf::internal::ArenaStringPtr variant_;
  ::tbMath::Vec3Message* position_;
  ::tbMath::Vec3Message* rotation_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class DeleteActorBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.DeleteActorBody) */ {
 public:
  DeleteActorBody();
  virtual ~DeleteActorBody();

  DeleteActorBody(const DeleteActorBody& from);

  inline DeleteActorBody& operator=(const DeleteActorBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteActorBody(DeleteActorBody&& from) noexcept
    : DeleteActorBody() {
    *this = ::std::move(from);
  }

  inline DeleteActorBody& operator=(DeleteActorBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteActorBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteActorBody* internal_default_instance() {
    return reinterpret_cast<const DeleteActorBody*>(
               &_DeleteActorBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DeleteActorBody* other);
  friend void swap(DeleteActorBody& a, DeleteActorBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteActorBody* New() const final {
    return CreateMaybeMessage<DeleteActorBody>(nullptr);
  }

  DeleteActorBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteActorBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteActorBody& from);
  void MergeFrom(const DeleteActorBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteActorBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.DeleteActorBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class SetCameraBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.SetCameraBody) */ {
 public:
  SetCameraBody();
  virtual ~SetCameraBody();

  SetCameraBody(const SetCameraBody& from);

  inline SetCameraBody& operator=(const SetCameraBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetCameraBody(SetCameraBody&& from) noexcept
    : SetCameraBody() {
    *this = ::std::move(from);
  }

  inline SetCameraBody& operator=(SetCameraBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetCameraBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCameraBody* internal_default_instance() {
    return reinterpret_cast<const SetCameraBody*>(
               &_SetCameraBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SetCameraBody* other);
  friend void swap(SetCameraBody& a, SetCameraBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCameraBody* New() const final {
    return CreateMaybeMessage<SetCameraBody>(nullptr);
  }

  SetCameraBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetCameraBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetCameraBody& from);
  void MergeFrom(const SetCameraBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCameraBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.SetCameraBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class MoveActorBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.MoveActorBody) */ {
 public:
  MoveActorBody();
  virtual ~MoveActorBody();

  MoveActorBody(const MoveActorBody& from);

  inline MoveActorBody& operator=(const MoveActorBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveActorBody(MoveActorBody&& from) noexcept
    : MoveActorBody() {
    *this = ::std::move(from);
  }

  inline MoveActorBody& operator=(MoveActorBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MoveActorBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveActorBody* internal_default_instance() {
    return reinterpret_cast<const MoveActorBody*>(
               &_MoveActorBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MoveActorBody* other);
  friend void swap(MoveActorBody& a, MoveActorBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveActorBody* New() const final {
    return CreateMaybeMessage<MoveActorBody>(nullptr);
  }

  MoveActorBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveActorBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveActorBody& from);
  void MergeFrom(const MoveActorBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveActorBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tbMath.Vec3Message position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::tbMath::Vec3Message& position() const;
  ::tbMath::Vec3Message* release_position();
  ::tbMath::Vec3Message* mutable_position();
  void set_allocated_position(::tbMath::Vec3Message* position);

  // .tbMath.Mat3Message rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  const ::tbMath::Mat3Message& rotation() const;
  ::tbMath::Mat3Message* release_rotation();
  ::tbMath::Mat3Message* mutable_rotation();
  void set_allocated_rotation(::tbMath::Mat3Message* rotation);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.MoveActorBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tbMath::Vec3Message* position_;
  ::tbMath::Mat3Message* rotation_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class SetActorAnimationBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.SetActorAnimationBody) */ {
 public:
  SetActorAnimationBody();
  virtual ~SetActorAnimationBody();

  SetActorAnimationBody(const SetActorAnimationBody& from);

  inline SetActorAnimationBody& operator=(const SetActorAnimationBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetActorAnimationBody(SetActorAnimationBody&& from) noexcept
    : SetActorAnimationBody() {
    *this = ::std::move(from);
  }

  inline SetActorAnimationBody& operator=(SetActorAnimationBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetActorAnimationBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetActorAnimationBody* internal_default_instance() {
    return reinterpret_cast<const SetActorAnimationBody*>(
               &_SetActorAnimationBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SetActorAnimationBody* other);
  friend void swap(SetActorAnimationBody& a, SetActorAnimationBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetActorAnimationBody* New() const final {
    return CreateMaybeMessage<SetActorAnimationBody>(nullptr);
  }

  SetActorAnimationBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetActorAnimationBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetActorAnimationBody& from);
  void MergeFrom(const SetActorAnimationBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActorAnimationBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string animation = 2;
  void clear_animation();
  static const int kAnimationFieldNumber = 2;
  const ::std::string& animation() const;
  void set_animation(const ::std::string& value);
  #if LANG_CXX11
  void set_animation(::std::string&& value);
  #endif
  void set_animation(const char* value);
  void set_animation(const char* value, size_t size);
  ::std::string* mutable_animation();
  ::std::string* release_animation();
  void set_allocated_animation(::std::string* animation);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.SetActorAnimationBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr animation_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class ApplyPhysicsBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.ApplyPhysicsBody) */ {
 public:
  ApplyPhysicsBody();
  virtual ~ApplyPhysicsBody();

  ApplyPhysicsBody(const ApplyPhysicsBody& from);

  inline ApplyPhysicsBody& operator=(const ApplyPhysicsBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApplyPhysicsBody(ApplyPhysicsBody&& from) noexcept
    : ApplyPhysicsBody() {
    *this = ::std::move(from);
  }

  inline ApplyPhysicsBody& operator=(ApplyPhysicsBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ApplyPhysicsBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyPhysicsBody* internal_default_instance() {
    return reinterpret_cast<const ApplyPhysicsBody*>(
               &_ApplyPhysicsBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ApplyPhysicsBody* other);
  friend void swap(ApplyPhysicsBody& a, ApplyPhysicsBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApplyPhysicsBody* New() const final {
    return CreateMaybeMessage<ApplyPhysicsBody>(nullptr);
  }

  ApplyPhysicsBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ApplyPhysicsBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ApplyPhysicsBody& from);
  void MergeFrom(const ApplyPhysicsBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyPhysicsBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tbMath.Vec3Message direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  const ::tbMath::Vec3Message& direction() const;
  ::tbMath::Vec3Message* release_direction();
  ::tbMath::Vec3Message* mutable_direction();
  void set_allocated_direction(::tbMath::Vec3Message* direction);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // float magnitude = 2;
  void clear_magnitude();
  static const int kMagnitudeFieldNumber = 2;
  float magnitude() const;
  void set_magnitude(float value);

  // @@protoc_insertion_point(class_scope:tbBasics.ApplyPhysicsBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tbMath::Vec3Message* direction_;
  ::google::protobuf::uint32 id_;
  float magnitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class LookDirectionBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.LookDirectionBody) */ {
 public:
  LookDirectionBody();
  virtual ~LookDirectionBody();

  LookDirectionBody(const LookDirectionBody& from);

  inline LookDirectionBody& operator=(const LookDirectionBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LookDirectionBody(LookDirectionBody&& from) noexcept
    : LookDirectionBody() {
    *this = ::std::move(from);
  }

  inline LookDirectionBody& operator=(LookDirectionBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LookDirectionBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookDirectionBody* internal_default_instance() {
    return reinterpret_cast<const LookDirectionBody*>(
               &_LookDirectionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LookDirectionBody* other);
  friend void swap(LookDirectionBody& a, LookDirectionBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LookDirectionBody* New() const final {
    return CreateMaybeMessage<LookDirectionBody>(nullptr);
  }

  LookDirectionBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LookDirectionBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LookDirectionBody& from);
  void MergeFrom(const LookDirectionBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookDirectionBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tbMath.Vec2Message direction = 2;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  const ::tbMath::Vec2Message& direction() const;
  ::tbMath::Vec2Message* release_direction();
  ::tbMath::Vec2Message* mutable_direction();
  void set_allocated_direction(::tbMath::Vec2Message* direction);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.LookDirectionBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tbMath::Vec2Message* direction_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class LookAtBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.LookAtBody) */ {
 public:
  LookAtBody();
  virtual ~LookAtBody();

  LookAtBody(const LookAtBody& from);

  inline LookAtBody& operator=(const LookAtBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LookAtBody(LookAtBody&& from) noexcept
    : LookAtBody() {
    *this = ::std::move(from);
  }

  inline LookAtBody& operator=(LookAtBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LookAtBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookAtBody* internal_default_instance() {
    return reinterpret_cast<const LookAtBody*>(
               &_LookAtBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LookAtBody* other);
  friend void swap(LookAtBody& a, LookAtBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LookAtBody* New() const final {
    return CreateMaybeMessage<LookAtBody>(nullptr);
  }

  LookAtBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LookAtBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LookAtBody& from);
  void MergeFrom(const LookAtBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookAtBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tbMath.Vec3Message rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  const ::tbMath::Vec3Message& rotation() const;
  ::tbMath::Vec3Message* release_rotation();
  ::tbMath::Vec3Message* mutable_rotation();
  void set_allocated_rotation(::tbMath::Vec3Message* rotation);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 target = 2;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  ::google::protobuf::uint32 target() const;
  void set_target(::google::protobuf::uint32 value);

  // float distance = 3;
  void clear_distance();
  static const int kDistanceFieldNumber = 3;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:tbBasics.LookAtBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tbMath::Vec3Message* rotation_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 target_;
  float distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class MoveNodeBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.MoveNodeBody) */ {
 public:
  MoveNodeBody();
  virtual ~MoveNodeBody();

  MoveNodeBody(const MoveNodeBody& from);

  inline MoveNodeBody& operator=(const MoveNodeBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveNodeBody(MoveNodeBody&& from) noexcept
    : MoveNodeBody() {
    *this = ::std::move(from);
  }

  inline MoveNodeBody& operator=(MoveNodeBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MoveNodeBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveNodeBody* internal_default_instance() {
    return reinterpret_cast<const MoveNodeBody*>(
               &_MoveNodeBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MoveNodeBody* other);
  friend void swap(MoveNodeBody& a, MoveNodeBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveNodeBody* New() const final {
    return CreateMaybeMessage<MoveNodeBody>(nullptr);
  }

  MoveNodeBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveNodeBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveNodeBody& from);
  void MergeFrom(const MoveNodeBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveNodeBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node = 2;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  const ::std::string& node() const;
  void set_node(const ::std::string& value);
  #if LANG_CXX11
  void set_node(::std::string&& value);
  #endif
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  ::std::string* mutable_node();
  ::std::string* release_node();
  void set_allocated_node(::std::string* node);

  // .tbMath.Vec3Message position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::tbMath::Vec3Message& position() const;
  ::tbMath::Vec3Message* release_position();
  ::tbMath::Vec3Message* mutable_position();
  void set_allocated_position(::tbMath::Vec3Message* position);

  // .tbMath.Vec3Message rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  const ::tbMath::Vec3Message& rotation() const;
  ::tbMath::Vec3Message* release_rotation();
  ::tbMath::Vec3Message* mutable_rotation();
  void set_allocated_rotation(::tbMath::Vec3Message* rotation);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.MoveNodeBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_;
  ::tbMath::Vec3Message* position_;
  ::tbMath::Vec3Message* rotation_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateActorBody

// uint32 id = 1;
inline void CreateActorBody::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CreateActorBody::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorBody.id)
  return id_;
}
inline void CreateActorBody::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.CreateActorBody.id)
}

// string entity = 2;
inline void CreateActorBody::clear_entity() {
  entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateActorBody::entity() const {
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorBody.entity)
  return entity_.GetNoArena();
}
inline void CreateActorBody::set_entity(const ::std::string& value) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tbBasics.CreateActorBody.entity)
}
#if LANG_CXX11
inline void CreateActorBody::set_entity(::std::string&& value) {
  
  entity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tbBasics.CreateActorBody.entity)
}
#endif
inline void CreateActorBody::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tbBasics.CreateActorBody.entity)
}
inline void CreateActorBody::set_entity(const char* value, size_t size) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tbBasics.CreateActorBody.entity)
}
inline ::std::string* CreateActorBody::mutable_entity() {
  
  // @@protoc_insertion_point(field_mutable:tbBasics.CreateActorBody.entity)
  return entity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateActorBody::release_entity() {
  // @@protoc_insertion_point(field_release:tbBasics.CreateActorBody.entity)
  
  return entity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActorBody::set_allocated_entity(::std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:tbBasics.CreateActorBody.entity)
}

// string variant = 3;
inline void CreateActorBody::clear_variant() {
  variant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateActorBody::variant() const {
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorBody.variant)
  return variant_.GetNoArena();
}
inline void CreateActorBody::set_variant(const ::std::string& value) {
  
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tbBasics.CreateActorBody.variant)
}
#if LANG_CXX11
inline void CreateActorBody::set_variant(::std::string&& value) {
  
  variant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tbBasics.CreateActorBody.variant)
}
#endif
inline void CreateActorBody::set_variant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tbBasics.CreateActorBody.variant)
}
inline void CreateActorBody::set_variant(const char* value, size_t size) {
  
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tbBasics.CreateActorBody.variant)
}
inline ::std::string* CreateActorBody::mutable_variant() {
  
  // @@protoc_insertion_point(field_mutable:tbBasics.CreateActorBody.variant)
  return variant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateActorBody::release_variant() {
  // @@protoc_insertion_point(field_release:tbBasics.CreateActorBody.variant)
  
  return variant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActorBody::set_allocated_variant(::std::string* variant) {
  if (variant != nullptr) {
    
  } else {
    
  }
  variant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant);
  // @@protoc_insertion_point(field_set_allocated:tbBasics.CreateActorBody.variant)
}

// .tbMath.Vec3Message position = 4;
inline bool CreateActorBody::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::tbMath::Vec3Message& CreateActorBody::position() const {
  const ::tbMath::Vec3Message* p = position_;
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorBody.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* CreateActorBody::release_position() {
  // @@protoc_insertion_point(field_release:tbBasics.CreateActorBody.position)
  
  ::tbMath::Vec3Message* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* CreateActorBody::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.CreateActorBody.position)
  return position_;
}
inline void CreateActorBody::set_allocated_position(::tbMath::Vec3Message* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.CreateActorBody.position)
}

// .tbMath.Vec3Message rotation = 5;
inline bool CreateActorBody::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::tbMath::Vec3Message& CreateActorBody::rotation() const {
  const ::tbMath::Vec3Message* p = rotation_;
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorBody.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* CreateActorBody::release_rotation() {
  // @@protoc_insertion_point(field_release:tbBasics.CreateActorBody.rotation)
  
  ::tbMath::Vec3Message* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* CreateActorBody::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.CreateActorBody.rotation)
  return rotation_;
}
inline void CreateActorBody::set_allocated_rotation(::tbMath::Vec3Message* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.CreateActorBody.rotation)
}

// -------------------------------------------------------------------

// DeleteActorBody

// uint32 id = 1;
inline void DeleteActorBody::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 DeleteActorBody::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.DeleteActorBody.id)
  return id_;
}
inline void DeleteActorBody::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.DeleteActorBody.id)
}

// -------------------------------------------------------------------

// SetCameraBody

// uint32 id = 1;
inline void SetCameraBody::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SetCameraBody::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.SetCameraBody.id)
  return id_;
}
inline void SetCameraBody::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.SetCameraBody.id)
}

// string name = 2;
inline void SetCameraBody::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetCameraBody::name() const {
  // @@protoc_insertion_point(field_get:tbBasics.SetCameraBody.name)
  return name_.GetNoArena();
}
inline void SetCameraBody::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tbBasics.SetCameraBody.name)
}
#if LANG_CXX11
inline void SetCameraBody::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tbBasics.SetCameraBody.name)
}
#endif
inline void SetCameraBody::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tbBasics.SetCameraBody.name)
}
inline void SetCameraBody::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tbBasics.SetCameraBody.name)
}
inline ::std::string* SetCameraBody::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tbBasics.SetCameraBody.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetCameraBody::release_name() {
  // @@protoc_insertion_point(field_release:tbBasics.SetCameraBody.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetCameraBody::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tbBasics.SetCameraBody.name)
}

// -------------------------------------------------------------------

// MoveActorBody

// uint32 id = 1;
inline void MoveActorBody::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MoveActorBody::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.MoveActorBody.id)
  return id_;
}
inline void MoveActorBody::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.MoveActorBody.id)
}

// .tbMath.Vec3Message position = 2;
inline bool MoveActorBody::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::tbMath::Vec3Message& MoveActorBody::position() const {
  const ::tbMath::Vec3Message* p = position_;
  // @@protoc_insertion_point(field_get:tbBasics.MoveActorBody.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* MoveActorBody::release_position() {
  // @@protoc_insertion_point(field_release:tbBasics.MoveActorBody.position)
  
  ::tbMath::Vec3Message* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* MoveActorBody::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.MoveActorBody.position)
  return position_;
}
inline void MoveActorBody::set_allocated_position(::tbMath::Vec3Message* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.MoveActorBody.position)
}

// .tbMath.Mat3Message rotation = 3;
inline bool MoveActorBody::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::tbMath::Mat3Message& MoveActorBody::rotation() const {
  const ::tbMath::Mat3Message* p = rotation_;
  // @@protoc_insertion_point(field_get:tbBasics.MoveActorBody.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Mat3Message*>(
      &::tbMath::_Mat3Message_default_instance_);
}
inline ::tbMath::Mat3Message* MoveActorBody::release_rotation() {
  // @@protoc_insertion_point(field_release:tbBasics.MoveActorBody.rotation)
  
  ::tbMath::Mat3Message* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::tbMath::Mat3Message* MoveActorBody::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Mat3Message>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.MoveActorBody.rotation)
  return rotation_;
}
inline void MoveActorBody::set_allocated_rotation(::tbMath::Mat3Message* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.MoveActorBody.rotation)
}

// -------------------------------------------------------------------

// SetActorAnimationBody

// uint32 id = 1;
inline void SetActorAnimationBody::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SetActorAnimationBody::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.SetActorAnimationBody.id)
  return id_;
}
inline void SetActorAnimationBody::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.SetActorAnimationBody.id)
}

// string animation = 2;
inline void SetActorAnimationBody::clear_animation() {
  animation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetActorAnimationBody::animation() const {
  // @@protoc_insertion_point(field_get:tbBasics.SetActorAnimationBody.animation)
  return animation_.GetNoArena();
}
inline void SetActorAnimationBody::set_animation(const ::std::string& value) {
  
  animation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tbBasics.SetActorAnimationBody.animation)
}
#if LANG_CXX11
inline void SetActorAnimationBody::set_animation(::std::string&& value) {
  
  animation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tbBasics.SetActorAnimationBody.animation)
}
#endif
inline void SetActorAnimationBody::set_animation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  animation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tbBasics.SetActorAnimationBody.animation)
}
inline void SetActorAnimationBody::set_animation(const char* value, size_t size) {
  
  animation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tbBasics.SetActorAnimationBody.animation)
}
inline ::std::string* SetActorAnimationBody::mutable_animation() {
  
  // @@protoc_insertion_point(field_mutable:tbBasics.SetActorAnimationBody.animation)
  return animation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetActorAnimationBody::release_animation() {
  // @@protoc_insertion_point(field_release:tbBasics.SetActorAnimationBody.animation)
  
  return animation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetActorAnimationBody::set_allocated_animation(::std::string* animation) {
  if (animation != nullptr) {
    
  } else {
    
  }
  animation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), animation);
  // @@protoc_insertion_point(field_set_allocated:tbBasics.SetActorAnimationBody.animation)
}

// -------------------------------------------------------------------

// ApplyPhysicsBody

// uint32 id = 1;
inline void ApplyPhysicsBody::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ApplyPhysicsBody::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.ApplyPhysicsBody.id)
  return id_;
}
inline void ApplyPhysicsBody::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.ApplyPhysicsBody.id)
}

// float magnitude = 2;
inline void ApplyPhysicsBody::clear_magnitude() {
  magnitude_ = 0;
}
inline float ApplyPhysicsBody::magnitude() const {
  // @@protoc_insertion_point(field_get:tbBasics.ApplyPhysicsBody.magnitude)
  return magnitude_;
}
inline void ApplyPhysicsBody::set_magnitude(float value) {
  
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.ApplyPhysicsBody.magnitude)
}

// .tbMath.Vec3Message direction = 3;
inline bool ApplyPhysicsBody::has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline const ::tbMath::Vec3Message& ApplyPhysicsBody::direction() const {
  const ::tbMath::Vec3Message* p = direction_;
  // @@protoc_insertion_point(field_get:tbBasics.ApplyPhysicsBody.direction)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* ApplyPhysicsBody::release_direction() {
  // @@protoc_insertion_point(field_release:tbBasics.ApplyPhysicsBody.direction)
  
  ::tbMath::Vec3Message* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* ApplyPhysicsBody::mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.ApplyPhysicsBody.direction)
  return direction_;
}
inline void ApplyPhysicsBody::set_allocated_direction(::tbMath::Vec3Message* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.ApplyPhysicsBody.direction)
}

// -------------------------------------------------------------------

// LookDirectionBody

// uint32 id = 1;
inline void LookDirectionBody::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 LookDirectionBody::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.LookDirectionBody.id)
  return id_;
}
inline void LookDirectionBody::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.LookDirectionBody.id)
}

// .tbMath.Vec2Message direction = 2;
inline bool LookDirectionBody::has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline const ::tbMath::Vec2Message& LookDirectionBody::direction() const {
  const ::tbMath::Vec2Message* p = direction_;
  // @@protoc_insertion_point(field_get:tbBasics.LookDirectionBody.direction)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec2Message*>(
      &::tbMath::_Vec2Message_default_instance_);
}
inline ::tbMath::Vec2Message* LookDirectionBody::release_direction() {
  // @@protoc_insertion_point(field_release:tbBasics.LookDirectionBody.direction)
  
  ::tbMath::Vec2Message* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::tbMath::Vec2Message* LookDirectionBody::mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec2Message>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.LookDirectionBody.direction)
  return direction_;
}
inline void LookDirectionBody::set_allocated_direction(::tbMath::Vec2Message* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.LookDirectionBody.direction)
}

// -------------------------------------------------------------------

// LookAtBody

// uint32 id = 1;
inline void LookAtBody::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 LookAtBody::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.LookAtBody.id)
  return id_;
}
inline void LookAtBody::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.LookAtBody.id)
}

// uint32 target = 2;
inline void LookAtBody::clear_target() {
  target_ = 0u;
}
inline ::google::protobuf::uint32 LookAtBody::target() const {
  // @@protoc_insertion_point(field_get:tbBasics.LookAtBody.target)
  return target_;
}
inline void LookAtBody::set_target(::google::protobuf::uint32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.LookAtBody.target)
}

// float distance = 3;
inline void LookAtBody::clear_distance() {
  distance_ = 0;
}
inline float LookAtBody::distance() const {
  // @@protoc_insertion_point(field_get:tbBasics.LookAtBody.distance)
  return distance_;
}
inline void LookAtBody::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.LookAtBody.distance)
}

// .tbMath.Vec3Message rotation = 4;
inline bool LookAtBody::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::tbMath::Vec3Message& LookAtBody::rotation() const {
  const ::tbMath::Vec3Message* p = rotation_;
  // @@protoc_insertion_point(field_get:tbBasics.LookAtBody.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* LookAtBody::release_rotation() {
  // @@protoc_insertion_point(field_release:tbBasics.LookAtBody.rotation)
  
  ::tbMath::Vec3Message* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* LookAtBody::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.LookAtBody.rotation)
  return rotation_;
}
inline void LookAtBody::set_allocated_rotation(::tbMath::Vec3Message* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.LookAtBody.rotation)
}

// -------------------------------------------------------------------

// MoveNodeBody

// uint32 id = 1;
inline void MoveNodeBody::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MoveNodeBody::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.MoveNodeBody.id)
  return id_;
}
inline void MoveNodeBody::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.MoveNodeBody.id)
}

// string node = 2;
inline void MoveNodeBody::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoveNodeBody::node() const {
  // @@protoc_insertion_point(field_get:tbBasics.MoveNodeBody.node)
  return node_.GetNoArena();
}
inline void MoveNodeBody::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tbBasics.MoveNodeBody.node)
}
#if LANG_CXX11
inline void MoveNodeBody::set_node(::std::string&& value) {
  
  node_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tbBasics.MoveNodeBody.node)
}
#endif
inline void MoveNodeBody::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tbBasics.MoveNodeBody.node)
}
inline void MoveNodeBody::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tbBasics.MoveNodeBody.node)
}
inline ::std::string* MoveNodeBody::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:tbBasics.MoveNodeBody.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoveNodeBody::release_node() {
  // @@protoc_insertion_point(field_release:tbBasics.MoveNodeBody.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoveNodeBody::set_allocated_node(::std::string* node) {
  if (node != nullptr) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:tbBasics.MoveNodeBody.node)
}

// .tbMath.Vec3Message position = 3;
inline bool MoveNodeBody::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::tbMath::Vec3Message& MoveNodeBody::position() const {
  const ::tbMath::Vec3Message* p = position_;
  // @@protoc_insertion_point(field_get:tbBasics.MoveNodeBody.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* MoveNodeBody::release_position() {
  // @@protoc_insertion_point(field_release:tbBasics.MoveNodeBody.position)
  
  ::tbMath::Vec3Message* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* MoveNodeBody::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.MoveNodeBody.position)
  return position_;
}
inline void MoveNodeBody::set_allocated_position(::tbMath::Vec3Message* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.MoveNodeBody.position)
}

// .tbMath.Vec3Message rotation = 4;
inline bool MoveNodeBody::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::tbMath::Vec3Message& MoveNodeBody::rotation() const {
  const ::tbMath::Vec3Message* p = rotation_;
  // @@protoc_insertion_point(field_get:tbBasics.MoveNodeBody.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* MoveNodeBody::release_rotation() {
  // @@protoc_insertion_point(field_release:tbBasics.MoveNodeBody.rotation)
  
  ::tbMath::Vec3Message* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* MoveNodeBody::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.MoveNodeBody.rotation)
  return rotation_;
}
inline void MoveNodeBody::set_allocated_rotation(::tbMath::Vec3Message* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.MoveNodeBody.rotation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tbBasics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_basic_2eproto
