// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: math.proto

#ifndef PROTOBUF_INCLUDED_math_2eproto
#define PROTOBUF_INCLUDED_math_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_math_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_math_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_math_2eproto();
namespace MathMessage {
class Mat3;
class Mat3DefaultTypeInternal;
extern Mat3DefaultTypeInternal _Mat3_default_instance_;
class Mat4;
class Mat4DefaultTypeInternal;
extern Mat4DefaultTypeInternal _Mat4_default_instance_;
class Vec2;
class Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
class Vec4;
class Vec4DefaultTypeInternal;
extern Vec4DefaultTypeInternal _Vec4_default_instance_;
}  // namespace MathMessage
namespace google {
namespace protobuf {
template<> ::MathMessage::Mat3* Arena::CreateMaybeMessage<::MathMessage::Mat3>(Arena*);
template<> ::MathMessage::Mat4* Arena::CreateMaybeMessage<::MathMessage::Mat4>(Arena*);
template<> ::MathMessage::Vec2* Arena::CreateMaybeMessage<::MathMessage::Vec2>(Arena*);
template<> ::MathMessage::Vec3* Arena::CreateMaybeMessage<::MathMessage::Vec3>(Arena*);
template<> ::MathMessage::Vec4* Arena::CreateMaybeMessage<::MathMessage::Vec4>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MathMessage {

// ===================================================================

class Vec2 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MathMessage.Vec2) */ {
 public:
  Vec2();
  virtual ~Vec2();

  Vec2(const Vec2& from);

  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vec2(Vec2&& from) noexcept
    : Vec2() {
    *this = ::std::move(from);
  }

  inline Vec2& operator=(Vec2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Vec2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec2* internal_default_instance() {
    return reinterpret_cast<const Vec2*>(
               &_Vec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vec2* other);
  friend void swap(Vec2& a, Vec2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vec2* New() const final {
    return CreateMaybeMessage<Vec2>(nullptr);
  }

  Vec2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vec2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vec2& from);
  void MergeFrom(const Vec2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:MathMessage.Vec2)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_math_2eproto;
};
// -------------------------------------------------------------------

class Vec3 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MathMessage.Vec3) */ {
 public:
  Vec3();
  virtual ~Vec3();

  Vec3(const Vec3& from);

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(Vec3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Vec3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Vec3* other);
  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vec3* New() const final {
    return CreateMaybeMessage<Vec3>(nullptr);
  }

  Vec3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vec3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:MathMessage.Vec3)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_math_2eproto;
};
// -------------------------------------------------------------------

class Vec4 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MathMessage.Vec4) */ {
 public:
  Vec4();
  virtual ~Vec4();

  Vec4(const Vec4& from);

  inline Vec4& operator=(const Vec4& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vec4(Vec4&& from) noexcept
    : Vec4() {
    *this = ::std::move(from);
  }

  inline Vec4& operator=(Vec4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Vec4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec4* internal_default_instance() {
    return reinterpret_cast<const Vec4*>(
               &_Vec4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Vec4* other);
  friend void swap(Vec4& a, Vec4& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vec4* New() const final {
    return CreateMaybeMessage<Vec4>(nullptr);
  }

  Vec4* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vec4>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vec4& from);
  void MergeFrom(const Vec4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:MathMessage.Vec4)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_math_2eproto;
};
// -------------------------------------------------------------------

class Mat3 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MathMessage.Mat3) */ {
 public:
  Mat3();
  virtual ~Mat3();

  Mat3(const Mat3& from);

  inline Mat3& operator=(const Mat3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mat3(Mat3&& from) noexcept
    : Mat3() {
    *this = ::std::move(from);
  }

  inline Mat3& operator=(Mat3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mat3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mat3* internal_default_instance() {
    return reinterpret_cast<const Mat3*>(
               &_Mat3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Mat3* other);
  friend void swap(Mat3& a, Mat3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mat3* New() const final {
    return CreateMaybeMessage<Mat3>(nullptr);
  }

  Mat3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mat3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mat3& from);
  void MergeFrom(const Mat3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mat3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MathMessage.Vec3 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  const ::MathMessage::Vec3& x() const;
  ::MathMessage::Vec3* release_x();
  ::MathMessage::Vec3* mutable_x();
  void set_allocated_x(::MathMessage::Vec3* x);

  // .MathMessage.Vec3 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  const ::MathMessage::Vec3& y() const;
  ::MathMessage::Vec3* release_y();
  ::MathMessage::Vec3* mutable_y();
  void set_allocated_y(::MathMessage::Vec3* y);

  // .MathMessage.Vec3 z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  const ::MathMessage::Vec3& z() const;
  ::MathMessage::Vec3* release_z();
  ::MathMessage::Vec3* mutable_z();
  void set_allocated_z(::MathMessage::Vec3* z);

  // @@protoc_insertion_point(class_scope:MathMessage.Mat3)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::MathMessage::Vec3* x_;
  ::MathMessage::Vec3* y_;
  ::MathMessage::Vec3* z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_math_2eproto;
};
// -------------------------------------------------------------------

class Mat4 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MathMessage.Mat4) */ {
 public:
  Mat4();
  virtual ~Mat4();

  Mat4(const Mat4& from);

  inline Mat4& operator=(const Mat4& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mat4(Mat4&& from) noexcept
    : Mat4() {
    *this = ::std::move(from);
  }

  inline Mat4& operator=(Mat4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mat4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mat4* internal_default_instance() {
    return reinterpret_cast<const Mat4*>(
               &_Mat4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Mat4* other);
  friend void swap(Mat4& a, Mat4& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mat4* New() const final {
    return CreateMaybeMessage<Mat4>(nullptr);
  }

  Mat4* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mat4>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mat4& from);
  void MergeFrom(const Mat4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mat4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MathMessage.Vec4 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  const ::MathMessage::Vec4& x() const;
  ::MathMessage::Vec4* release_x();
  ::MathMessage::Vec4* mutable_x();
  void set_allocated_x(::MathMessage::Vec4* x);

  // .MathMessage.Vec4 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  const ::MathMessage::Vec4& y() const;
  ::MathMessage::Vec4* release_y();
  ::MathMessage::Vec4* mutable_y();
  void set_allocated_y(::MathMessage::Vec4* y);

  // .MathMessage.Vec4 z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  const ::MathMessage::Vec4& z() const;
  ::MathMessage::Vec4* release_z();
  ::MathMessage::Vec4* mutable_z();
  void set_allocated_z(::MathMessage::Vec4* z);

  // .MathMessage.Vec4 w = 4;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 4;
  const ::MathMessage::Vec4& w() const;
  ::MathMessage::Vec4* release_w();
  ::MathMessage::Vec4* mutable_w();
  void set_allocated_w(::MathMessage::Vec4* w);

  // @@protoc_insertion_point(class_scope:MathMessage.Mat4)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::MathMessage::Vec4* x_;
  ::MathMessage::Vec4* y_;
  ::MathMessage::Vec4* z_;
  ::MathMessage::Vec4* w_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_math_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec2

// float x = 1;
inline void Vec2::clear_x() {
  x_ = 0;
}
inline float Vec2::x() const {
  // @@protoc_insertion_point(field_get:MathMessage.Vec2.x)
  return x_;
}
inline void Vec2::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MathMessage.Vec2.x)
}

// float y = 2;
inline void Vec2::clear_y() {
  y_ = 0;
}
inline float Vec2::y() const {
  // @@protoc_insertion_point(field_get:MathMessage.Vec2.y)
  return y_;
}
inline void Vec2::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MathMessage.Vec2.y)
}

// -------------------------------------------------------------------

// Vec3

// float x = 1;
inline void Vec3::clear_x() {
  x_ = 0;
}
inline float Vec3::x() const {
  // @@protoc_insertion_point(field_get:MathMessage.Vec3.x)
  return x_;
}
inline void Vec3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MathMessage.Vec3.x)
}

// float y = 2;
inline void Vec3::clear_y() {
  y_ = 0;
}
inline float Vec3::y() const {
  // @@protoc_insertion_point(field_get:MathMessage.Vec3.y)
  return y_;
}
inline void Vec3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MathMessage.Vec3.y)
}

// float z = 3;
inline void Vec3::clear_z() {
  z_ = 0;
}
inline float Vec3::z() const {
  // @@protoc_insertion_point(field_get:MathMessage.Vec3.z)
  return z_;
}
inline void Vec3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:MathMessage.Vec3.z)
}

// -------------------------------------------------------------------

// Vec4

// float x = 1;
inline void Vec4::clear_x() {
  x_ = 0;
}
inline float Vec4::x() const {
  // @@protoc_insertion_point(field_get:MathMessage.Vec4.x)
  return x_;
}
inline void Vec4::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:MathMessage.Vec4.x)
}

// float y = 2;
inline void Vec4::clear_y() {
  y_ = 0;
}
inline float Vec4::y() const {
  // @@protoc_insertion_point(field_get:MathMessage.Vec4.y)
  return y_;
}
inline void Vec4::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:MathMessage.Vec4.y)
}

// float z = 3;
inline void Vec4::clear_z() {
  z_ = 0;
}
inline float Vec4::z() const {
  // @@protoc_insertion_point(field_get:MathMessage.Vec4.z)
  return z_;
}
inline void Vec4::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:MathMessage.Vec4.z)
}

// float w = 4;
inline void Vec4::clear_w() {
  w_ = 0;
}
inline float Vec4::w() const {
  // @@protoc_insertion_point(field_get:MathMessage.Vec4.w)
  return w_;
}
inline void Vec4::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:MathMessage.Vec4.w)
}

// -------------------------------------------------------------------

// Mat3

// .MathMessage.Vec3 x = 1;
inline bool Mat3::has_x() const {
  return this != internal_default_instance() && x_ != nullptr;
}
inline void Mat3::clear_x() {
  if (GetArenaNoVirtual() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
inline const ::MathMessage::Vec3& Mat3::x() const {
  const ::MathMessage::Vec3* p = x_;
  // @@protoc_insertion_point(field_get:MathMessage.Mat3.x)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* Mat3::release_x() {
  // @@protoc_insertion_point(field_release:MathMessage.Mat3.x)
  
  ::MathMessage::Vec3* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* Mat3::mutable_x() {
  
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    x_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MathMessage.Mat3.x)
  return x_;
}
inline void Mat3::set_allocated_x(::MathMessage::Vec3* x) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      x = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:MathMessage.Mat3.x)
}

// .MathMessage.Vec3 y = 2;
inline bool Mat3::has_y() const {
  return this != internal_default_instance() && y_ != nullptr;
}
inline void Mat3::clear_y() {
  if (GetArenaNoVirtual() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
inline const ::MathMessage::Vec3& Mat3::y() const {
  const ::MathMessage::Vec3* p = y_;
  // @@protoc_insertion_point(field_get:MathMessage.Mat3.y)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* Mat3::release_y() {
  // @@protoc_insertion_point(field_release:MathMessage.Mat3.y)
  
  ::MathMessage::Vec3* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* Mat3::mutable_y() {
  
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    y_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MathMessage.Mat3.y)
  return y_;
}
inline void Mat3::set_allocated_y(::MathMessage::Vec3* y) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete y_;
  }
  if (y) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      y = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:MathMessage.Mat3.y)
}

// .MathMessage.Vec3 z = 3;
inline bool Mat3::has_z() const {
  return this != internal_default_instance() && z_ != nullptr;
}
inline void Mat3::clear_z() {
  if (GetArenaNoVirtual() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
}
inline const ::MathMessage::Vec3& Mat3::z() const {
  const ::MathMessage::Vec3* p = z_;
  // @@protoc_insertion_point(field_get:MathMessage.Mat3.z)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec3*>(
      &::MathMessage::_Vec3_default_instance_);
}
inline ::MathMessage::Vec3* Mat3::release_z() {
  // @@protoc_insertion_point(field_release:MathMessage.Mat3.z)
  
  ::MathMessage::Vec3* temp = z_;
  z_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec3* Mat3::mutable_z() {
  
  if (z_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec3>(GetArenaNoVirtual());
    z_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MathMessage.Mat3.z)
  return z_;
}
inline void Mat3::set_allocated_z(::MathMessage::Vec3* z) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete z_;
  }
  if (z) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      z = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  z_ = z;
  // @@protoc_insertion_point(field_set_allocated:MathMessage.Mat3.z)
}

// -------------------------------------------------------------------

// Mat4

// .MathMessage.Vec4 x = 1;
inline bool Mat4::has_x() const {
  return this != internal_default_instance() && x_ != nullptr;
}
inline void Mat4::clear_x() {
  if (GetArenaNoVirtual() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
inline const ::MathMessage::Vec4& Mat4::x() const {
  const ::MathMessage::Vec4* p = x_;
  // @@protoc_insertion_point(field_get:MathMessage.Mat4.x)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec4*>(
      &::MathMessage::_Vec4_default_instance_);
}
inline ::MathMessage::Vec4* Mat4::release_x() {
  // @@protoc_insertion_point(field_release:MathMessage.Mat4.x)
  
  ::MathMessage::Vec4* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec4* Mat4::mutable_x() {
  
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec4>(GetArenaNoVirtual());
    x_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MathMessage.Mat4.x)
  return x_;
}
inline void Mat4::set_allocated_x(::MathMessage::Vec4* x) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      x = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:MathMessage.Mat4.x)
}

// .MathMessage.Vec4 y = 2;
inline bool Mat4::has_y() const {
  return this != internal_default_instance() && y_ != nullptr;
}
inline void Mat4::clear_y() {
  if (GetArenaNoVirtual() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
inline const ::MathMessage::Vec4& Mat4::y() const {
  const ::MathMessage::Vec4* p = y_;
  // @@protoc_insertion_point(field_get:MathMessage.Mat4.y)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec4*>(
      &::MathMessage::_Vec4_default_instance_);
}
inline ::MathMessage::Vec4* Mat4::release_y() {
  // @@protoc_insertion_point(field_release:MathMessage.Mat4.y)
  
  ::MathMessage::Vec4* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec4* Mat4::mutable_y() {
  
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec4>(GetArenaNoVirtual());
    y_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MathMessage.Mat4.y)
  return y_;
}
inline void Mat4::set_allocated_y(::MathMessage::Vec4* y) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete y_;
  }
  if (y) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      y = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:MathMessage.Mat4.y)
}

// .MathMessage.Vec4 z = 3;
inline bool Mat4::has_z() const {
  return this != internal_default_instance() && z_ != nullptr;
}
inline void Mat4::clear_z() {
  if (GetArenaNoVirtual() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
}
inline const ::MathMessage::Vec4& Mat4::z() const {
  const ::MathMessage::Vec4* p = z_;
  // @@protoc_insertion_point(field_get:MathMessage.Mat4.z)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec4*>(
      &::MathMessage::_Vec4_default_instance_);
}
inline ::MathMessage::Vec4* Mat4::release_z() {
  // @@protoc_insertion_point(field_release:MathMessage.Mat4.z)
  
  ::MathMessage::Vec4* temp = z_;
  z_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec4* Mat4::mutable_z() {
  
  if (z_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec4>(GetArenaNoVirtual());
    z_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MathMessage.Mat4.z)
  return z_;
}
inline void Mat4::set_allocated_z(::MathMessage::Vec4* z) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete z_;
  }
  if (z) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      z = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  z_ = z;
  // @@protoc_insertion_point(field_set_allocated:MathMessage.Mat4.z)
}

// .MathMessage.Vec4 w = 4;
inline bool Mat4::has_w() const {
  return this != internal_default_instance() && w_ != nullptr;
}
inline void Mat4::clear_w() {
  if (GetArenaNoVirtual() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
}
inline const ::MathMessage::Vec4& Mat4::w() const {
  const ::MathMessage::Vec4* p = w_;
  // @@protoc_insertion_point(field_get:MathMessage.Mat4.w)
  return p != nullptr ? *p : *reinterpret_cast<const ::MathMessage::Vec4*>(
      &::MathMessage::_Vec4_default_instance_);
}
inline ::MathMessage::Vec4* Mat4::release_w() {
  // @@protoc_insertion_point(field_release:MathMessage.Mat4.w)
  
  ::MathMessage::Vec4* temp = w_;
  w_ = nullptr;
  return temp;
}
inline ::MathMessage::Vec4* Mat4::mutable_w() {
  
  if (w_ == nullptr) {
    auto* p = CreateMaybeMessage<::MathMessage::Vec4>(GetArenaNoVirtual());
    w_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MathMessage.Mat4.w)
  return w_;
}
inline void Mat4::set_allocated_w(::MathMessage::Vec4* w) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete w_;
  }
  if (w) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      w = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, w, submessage_arena);
    }
    
  } else {
    
  }
  w_ = w;
  // @@protoc_insertion_point(field_set_allocated:MathMessage.Mat4.w)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MathMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_math_2eproto
