// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto
#ifndef GRPC_messages_2eproto__INCLUDED
#define GRPC_messages_2eproto__INCLUDED

#include "messages.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace tbMessages {

class TarboraMessages final {
 public:
  static constexpr char const* service_full_name() {
    return "tbMessages.TarboraMessages";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tbMessages::Message, ::tbMessages::Message>> Connect(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tbMessages::Message, ::tbMessages::Message>>(ConnectRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tbMessages::Message, ::tbMessages::Message>> AsyncConnect(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tbMessages::Message, ::tbMessages::Message>>(AsyncConnectRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tbMessages::Message, ::tbMessages::Message>> PrepareAsyncConnect(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tbMessages::Message, ::tbMessages::Message>>(PrepareAsyncConnectRaw(context, cq));
    }
    virtual ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::tbMessages::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>> AsyncSubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    virtual ::grpc::Status Desubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::tbMessages::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>> AsyncDesubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>>(AsyncDesubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>> PrepareAsyncDesubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>>(PrepareAsyncDesubscribeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Connect(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::tbMessages::Message,::tbMessages::Message>* reactor) = 0;
      virtual void Subscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Subscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Subscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Subscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Desubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Desubscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Desubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Desubscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::tbMessages::Message, ::tbMessages::Message>* ConnectRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::tbMessages::Message, ::tbMessages::Message>* AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::tbMessages::Message, ::tbMessages::Message>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>* AsyncDesubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tbMessages::Empty>* PrepareAsyncDesubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::tbMessages::Message, ::tbMessages::Message>> Connect(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::tbMessages::Message, ::tbMessages::Message>>(ConnectRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::tbMessages::Message, ::tbMessages::Message>> AsyncConnect(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::tbMessages::Message, ::tbMessages::Message>>(AsyncConnectRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::tbMessages::Message, ::tbMessages::Message>> PrepareAsyncConnect(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::tbMessages::Message, ::tbMessages::Message>>(PrepareAsyncConnectRaw(context, cq));
    }
    ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::tbMessages::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>> AsyncSubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status Desubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::tbMessages::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>> AsyncDesubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>>(AsyncDesubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>> PrepareAsyncDesubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>>(PrepareAsyncDesubscribeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Connect(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::tbMessages::Message,::tbMessages::Message>* reactor) override;
      void Subscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)>) override;
      void Subscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)>) override;
      void Subscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Subscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Desubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)>) override;
      void Desubscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)>) override;
      void Desubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Desubscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* ConnectRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>* AsyncDesubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>* PrepareAsyncDesubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Connect_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Desubscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* stream);
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response);
    virtual ::grpc::Status Desubscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::tbMessages::EventHeader* request, ::grpc::ServerAsyncResponseWriter< ::tbMessages::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Desubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Desubscribe() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Desubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Desubscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDesubscribe(::grpc::ServerContext* context, ::tbMessages::EventHeader* request, ::grpc::ServerAsyncResponseWriter< ::tbMessages::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Connect<WithAsyncMethod_Subscribe<WithAsyncMethod_Desubscribe<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackBidiHandler< ::tbMessages::Message, ::tbMessages::Message>(
          [this] { return this->Connect(); }));
    }
    ~ExperimentalWithCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::tbMessages::Message, ::tbMessages::Message>* Connect() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::tbMessages::Message, ::tbMessages::Message>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Subscribe() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::tbMessages::EventHeader, ::tbMessages::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::tbMessages::EventHeader* request,
                 ::tbMessages::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Subscribe(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Subscribe(
        ::grpc::experimental::MessageAllocator< ::tbMessages::EventHeader, ::tbMessages::Empty>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tbMessages::EventHeader, ::tbMessages::Empty>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Subscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Desubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Desubscribe() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::tbMessages::EventHeader, ::tbMessages::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::tbMessages::EventHeader* request,
                 ::tbMessages::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Desubscribe(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Desubscribe(
        ::grpc::experimental::MessageAllocator< ::tbMessages::EventHeader, ::tbMessages::Empty>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tbMessages::EventHeader, ::tbMessages::Empty>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Desubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Desubscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Desubscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Connect<ExperimentalWithCallbackMethod_Subscribe<ExperimentalWithCallbackMethod_Desubscribe<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Desubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Desubscribe() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Desubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Desubscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Connect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Desubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Desubscribe() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Desubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Desubscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDesubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Connect(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Connect() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Subscribe() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Subscribe(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Subscribe(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Desubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Desubscribe() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Desubscribe(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Desubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Desubscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Desubscribe(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::tbMessages::EventHeader, ::tbMessages::Empty>(std::bind(&WithStreamedUnaryMethod_Subscribe<BaseClass>::StreamedSubscribe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tbMessages::EventHeader,::tbMessages::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Desubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Desubscribe() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::tbMessages::EventHeader, ::tbMessages::Empty>(std::bind(&WithStreamedUnaryMethod_Desubscribe<BaseClass>::StreamedDesubscribe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Desubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Desubscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDesubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tbMessages::EventHeader,::tbMessages::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_Desubscribe<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_Desubscribe<Service > > StreamedService;
};

}  // namespace tbMessages


#endif  // GRPC_messages_2eproto__INCLUDED
