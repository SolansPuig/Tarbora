// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: math.proto

#ifndef PROTOBUF_INCLUDED_math_2eproto
#define PROTOBUF_INCLUDED_math_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_math_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_math_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_math_2eproto();
namespace tbMath {
class Mat3Message;
class Mat3MessageDefaultTypeInternal;
extern Mat3MessageDefaultTypeInternal _Mat3Message_default_instance_;
class Mat4Message;
class Mat4MessageDefaultTypeInternal;
extern Mat4MessageDefaultTypeInternal _Mat4Message_default_instance_;
class Vec3Message;
class Vec3MessageDefaultTypeInternal;
extern Vec3MessageDefaultTypeInternal _Vec3Message_default_instance_;
class Vec4Message;
class Vec4MessageDefaultTypeInternal;
extern Vec4MessageDefaultTypeInternal _Vec4Message_default_instance_;
}  // namespace tbMath
namespace google {
namespace protobuf {
template<> ::tbMath::Mat3Message* Arena::CreateMaybeMessage<::tbMath::Mat3Message>(Arena*);
template<> ::tbMath::Mat4Message* Arena::CreateMaybeMessage<::tbMath::Mat4Message>(Arena*);
template<> ::tbMath::Vec3Message* Arena::CreateMaybeMessage<::tbMath::Vec3Message>(Arena*);
template<> ::tbMath::Vec4Message* Arena::CreateMaybeMessage<::tbMath::Vec4Message>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tbMath {

// ===================================================================

class Vec3Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbMath.Vec3Message) */ {
 public:
  Vec3Message();
  virtual ~Vec3Message();

  Vec3Message(const Vec3Message& from);

  inline Vec3Message& operator=(const Vec3Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vec3Message(Vec3Message&& from) noexcept
    : Vec3Message() {
    *this = ::std::move(from);
  }

  inline Vec3Message& operator=(Vec3Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Vec3Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3Message* internal_default_instance() {
    return reinterpret_cast<const Vec3Message*>(
               &_Vec3Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vec3Message* other);
  friend void swap(Vec3Message& a, Vec3Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vec3Message* New() const final {
    return CreateMaybeMessage<Vec3Message>(nullptr);
  }

  Vec3Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vec3Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vec3Message& from);
  void MergeFrom(const Vec3Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:tbMath.Vec3Message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_math_2eproto;
};
// -------------------------------------------------------------------

class Vec4Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbMath.Vec4Message) */ {
 public:
  Vec4Message();
  virtual ~Vec4Message();

  Vec4Message(const Vec4Message& from);

  inline Vec4Message& operator=(const Vec4Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vec4Message(Vec4Message&& from) noexcept
    : Vec4Message() {
    *this = ::std::move(from);
  }

  inline Vec4Message& operator=(Vec4Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Vec4Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec4Message* internal_default_instance() {
    return reinterpret_cast<const Vec4Message*>(
               &_Vec4Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Vec4Message* other);
  friend void swap(Vec4Message& a, Vec4Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vec4Message* New() const final {
    return CreateMaybeMessage<Vec4Message>(nullptr);
  }

  Vec4Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vec4Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vec4Message& from);
  void MergeFrom(const Vec4Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec4Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:tbMath.Vec4Message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_math_2eproto;
};
// -------------------------------------------------------------------

class Mat3Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbMath.Mat3Message) */ {
 public:
  Mat3Message();
  virtual ~Mat3Message();

  Mat3Message(const Mat3Message& from);

  inline Mat3Message& operator=(const Mat3Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mat3Message(Mat3Message&& from) noexcept
    : Mat3Message() {
    *this = ::std::move(from);
  }

  inline Mat3Message& operator=(Mat3Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mat3Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mat3Message* internal_default_instance() {
    return reinterpret_cast<const Mat3Message*>(
               &_Mat3Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Mat3Message* other);
  friend void swap(Mat3Message& a, Mat3Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mat3Message* New() const final {
    return CreateMaybeMessage<Mat3Message>(nullptr);
  }

  Mat3Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mat3Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mat3Message& from);
  void MergeFrom(const Mat3Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mat3Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tbMath.Vec3Message x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  const ::tbMath::Vec3Message& x() const;
  ::tbMath::Vec3Message* release_x();
  ::tbMath::Vec3Message* mutable_x();
  void set_allocated_x(::tbMath::Vec3Message* x);

  // .tbMath.Vec3Message y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  const ::tbMath::Vec3Message& y() const;
  ::tbMath::Vec3Message* release_y();
  ::tbMath::Vec3Message* mutable_y();
  void set_allocated_y(::tbMath::Vec3Message* y);

  // .tbMath.Vec3Message z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  const ::tbMath::Vec3Message& z() const;
  ::tbMath::Vec3Message* release_z();
  ::tbMath::Vec3Message* mutable_z();
  void set_allocated_z(::tbMath::Vec3Message* z);

  // @@protoc_insertion_point(class_scope:tbMath.Mat3Message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tbMath::Vec3Message* x_;
  ::tbMath::Vec3Message* y_;
  ::tbMath::Vec3Message* z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_math_2eproto;
};
// -------------------------------------------------------------------

class Mat4Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbMath.Mat4Message) */ {
 public:
  Mat4Message();
  virtual ~Mat4Message();

  Mat4Message(const Mat4Message& from);

  inline Mat4Message& operator=(const Mat4Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mat4Message(Mat4Message&& from) noexcept
    : Mat4Message() {
    *this = ::std::move(from);
  }

  inline Mat4Message& operator=(Mat4Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mat4Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mat4Message* internal_default_instance() {
    return reinterpret_cast<const Mat4Message*>(
               &_Mat4Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Mat4Message* other);
  friend void swap(Mat4Message& a, Mat4Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mat4Message* New() const final {
    return CreateMaybeMessage<Mat4Message>(nullptr);
  }

  Mat4Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mat4Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mat4Message& from);
  void MergeFrom(const Mat4Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mat4Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tbMath.Vec4Message x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  const ::tbMath::Vec4Message& x() const;
  ::tbMath::Vec4Message* release_x();
  ::tbMath::Vec4Message* mutable_x();
  void set_allocated_x(::tbMath::Vec4Message* x);

  // .tbMath.Vec4Message y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  const ::tbMath::Vec4Message& y() const;
  ::tbMath::Vec4Message* release_y();
  ::tbMath::Vec4Message* mutable_y();
  void set_allocated_y(::tbMath::Vec4Message* y);

  // .tbMath.Vec4Message z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  const ::tbMath::Vec4Message& z() const;
  ::tbMath::Vec4Message* release_z();
  ::tbMath::Vec4Message* mutable_z();
  void set_allocated_z(::tbMath::Vec4Message* z);

  // .tbMath.Vec4Message w = 4;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 4;
  const ::tbMath::Vec4Message& w() const;
  ::tbMath::Vec4Message* release_w();
  ::tbMath::Vec4Message* mutable_w();
  void set_allocated_w(::tbMath::Vec4Message* w);

  // @@protoc_insertion_point(class_scope:tbMath.Mat4Message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tbMath::Vec4Message* x_;
  ::tbMath::Vec4Message* y_;
  ::tbMath::Vec4Message* z_;
  ::tbMath::Vec4Message* w_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_math_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec3Message

// float x = 1;
inline void Vec3Message::clear_x() {
  x_ = 0;
}
inline float Vec3Message::x() const {
  // @@protoc_insertion_point(field_get:tbMath.Vec3Message.x)
  return x_;
}
inline void Vec3Message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:tbMath.Vec3Message.x)
}

// float y = 2;
inline void Vec3Message::clear_y() {
  y_ = 0;
}
inline float Vec3Message::y() const {
  // @@protoc_insertion_point(field_get:tbMath.Vec3Message.y)
  return y_;
}
inline void Vec3Message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:tbMath.Vec3Message.y)
}

// float z = 3;
inline void Vec3Message::clear_z() {
  z_ = 0;
}
inline float Vec3Message::z() const {
  // @@protoc_insertion_point(field_get:tbMath.Vec3Message.z)
  return z_;
}
inline void Vec3Message::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:tbMath.Vec3Message.z)
}

// -------------------------------------------------------------------

// Vec4Message

// float x = 1;
inline void Vec4Message::clear_x() {
  x_ = 0;
}
inline float Vec4Message::x() const {
  // @@protoc_insertion_point(field_get:tbMath.Vec4Message.x)
  return x_;
}
inline void Vec4Message::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:tbMath.Vec4Message.x)
}

// float y = 2;
inline void Vec4Message::clear_y() {
  y_ = 0;
}
inline float Vec4Message::y() const {
  // @@protoc_insertion_point(field_get:tbMath.Vec4Message.y)
  return y_;
}
inline void Vec4Message::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:tbMath.Vec4Message.y)
}

// float z = 3;
inline void Vec4Message::clear_z() {
  z_ = 0;
}
inline float Vec4Message::z() const {
  // @@protoc_insertion_point(field_get:tbMath.Vec4Message.z)
  return z_;
}
inline void Vec4Message::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:tbMath.Vec4Message.z)
}

// float w = 4;
inline void Vec4Message::clear_w() {
  w_ = 0;
}
inline float Vec4Message::w() const {
  // @@protoc_insertion_point(field_get:tbMath.Vec4Message.w)
  return w_;
}
inline void Vec4Message::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:tbMath.Vec4Message.w)
}

// -------------------------------------------------------------------

// Mat3Message

// .tbMath.Vec3Message x = 1;
inline bool Mat3Message::has_x() const {
  return this != internal_default_instance() && x_ != nullptr;
}
inline void Mat3Message::clear_x() {
  if (GetArenaNoVirtual() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
inline const ::tbMath::Vec3Message& Mat3Message::x() const {
  const ::tbMath::Vec3Message* p = x_;
  // @@protoc_insertion_point(field_get:tbMath.Mat3Message.x)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* Mat3Message::release_x() {
  // @@protoc_insertion_point(field_release:tbMath.Mat3Message.x)
  
  ::tbMath::Vec3Message* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* Mat3Message::mutable_x() {
  
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    x_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbMath.Mat3Message.x)
  return x_;
}
inline void Mat3Message::set_allocated_x(::tbMath::Vec3Message* x) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      x = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:tbMath.Mat3Message.x)
}

// .tbMath.Vec3Message y = 2;
inline bool Mat3Message::has_y() const {
  return this != internal_default_instance() && y_ != nullptr;
}
inline void Mat3Message::clear_y() {
  if (GetArenaNoVirtual() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
inline const ::tbMath::Vec3Message& Mat3Message::y() const {
  const ::tbMath::Vec3Message* p = y_;
  // @@protoc_insertion_point(field_get:tbMath.Mat3Message.y)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* Mat3Message::release_y() {
  // @@protoc_insertion_point(field_release:tbMath.Mat3Message.y)
  
  ::tbMath::Vec3Message* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* Mat3Message::mutable_y() {
  
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    y_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbMath.Mat3Message.y)
  return y_;
}
inline void Mat3Message::set_allocated_y(::tbMath::Vec3Message* y) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete y_;
  }
  if (y) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      y = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:tbMath.Mat3Message.y)
}

// .tbMath.Vec3Message z = 3;
inline bool Mat3Message::has_z() const {
  return this != internal_default_instance() && z_ != nullptr;
}
inline void Mat3Message::clear_z() {
  if (GetArenaNoVirtual() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
}
inline const ::tbMath::Vec3Message& Mat3Message::z() const {
  const ::tbMath::Vec3Message* p = z_;
  // @@protoc_insertion_point(field_get:tbMath.Mat3Message.z)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* Mat3Message::release_z() {
  // @@protoc_insertion_point(field_release:tbMath.Mat3Message.z)
  
  ::tbMath::Vec3Message* temp = z_;
  z_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* Mat3Message::mutable_z() {
  
  if (z_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    z_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbMath.Mat3Message.z)
  return z_;
}
inline void Mat3Message::set_allocated_z(::tbMath::Vec3Message* z) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete z_;
  }
  if (z) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      z = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  z_ = z;
  // @@protoc_insertion_point(field_set_allocated:tbMath.Mat3Message.z)
}

// -------------------------------------------------------------------

// Mat4Message

// .tbMath.Vec4Message x = 1;
inline bool Mat4Message::has_x() const {
  return this != internal_default_instance() && x_ != nullptr;
}
inline void Mat4Message::clear_x() {
  if (GetArenaNoVirtual() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
inline const ::tbMath::Vec4Message& Mat4Message::x() const {
  const ::tbMath::Vec4Message* p = x_;
  // @@protoc_insertion_point(field_get:tbMath.Mat4Message.x)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec4Message*>(
      &::tbMath::_Vec4Message_default_instance_);
}
inline ::tbMath::Vec4Message* Mat4Message::release_x() {
  // @@protoc_insertion_point(field_release:tbMath.Mat4Message.x)
  
  ::tbMath::Vec4Message* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::tbMath::Vec4Message* Mat4Message::mutable_x() {
  
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec4Message>(GetArenaNoVirtual());
    x_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbMath.Mat4Message.x)
  return x_;
}
inline void Mat4Message::set_allocated_x(::tbMath::Vec4Message* x) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      x = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:tbMath.Mat4Message.x)
}

// .tbMath.Vec4Message y = 2;
inline bool Mat4Message::has_y() const {
  return this != internal_default_instance() && y_ != nullptr;
}
inline void Mat4Message::clear_y() {
  if (GetArenaNoVirtual() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
inline const ::tbMath::Vec4Message& Mat4Message::y() const {
  const ::tbMath::Vec4Message* p = y_;
  // @@protoc_insertion_point(field_get:tbMath.Mat4Message.y)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec4Message*>(
      &::tbMath::_Vec4Message_default_instance_);
}
inline ::tbMath::Vec4Message* Mat4Message::release_y() {
  // @@protoc_insertion_point(field_release:tbMath.Mat4Message.y)
  
  ::tbMath::Vec4Message* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::tbMath::Vec4Message* Mat4Message::mutable_y() {
  
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec4Message>(GetArenaNoVirtual());
    y_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbMath.Mat4Message.y)
  return y_;
}
inline void Mat4Message::set_allocated_y(::tbMath::Vec4Message* y) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete y_;
  }
  if (y) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      y = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:tbMath.Mat4Message.y)
}

// .tbMath.Vec4Message z = 3;
inline bool Mat4Message::has_z() const {
  return this != internal_default_instance() && z_ != nullptr;
}
inline void Mat4Message::clear_z() {
  if (GetArenaNoVirtual() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
}
inline const ::tbMath::Vec4Message& Mat4Message::z() const {
  const ::tbMath::Vec4Message* p = z_;
  // @@protoc_insertion_point(field_get:tbMath.Mat4Message.z)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec4Message*>(
      &::tbMath::_Vec4Message_default_instance_);
}
inline ::tbMath::Vec4Message* Mat4Message::release_z() {
  // @@protoc_insertion_point(field_release:tbMath.Mat4Message.z)
  
  ::tbMath::Vec4Message* temp = z_;
  z_ = nullptr;
  return temp;
}
inline ::tbMath::Vec4Message* Mat4Message::mutable_z() {
  
  if (z_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec4Message>(GetArenaNoVirtual());
    z_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbMath.Mat4Message.z)
  return z_;
}
inline void Mat4Message::set_allocated_z(::tbMath::Vec4Message* z) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete z_;
  }
  if (z) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      z = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  z_ = z;
  // @@protoc_insertion_point(field_set_allocated:tbMath.Mat4Message.z)
}

// .tbMath.Vec4Message w = 4;
inline bool Mat4Message::has_w() const {
  return this != internal_default_instance() && w_ != nullptr;
}
inline void Mat4Message::clear_w() {
  if (GetArenaNoVirtual() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
}
inline const ::tbMath::Vec4Message& Mat4Message::w() const {
  const ::tbMath::Vec4Message* p = w_;
  // @@protoc_insertion_point(field_get:tbMath.Mat4Message.w)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec4Message*>(
      &::tbMath::_Vec4Message_default_instance_);
}
inline ::tbMath::Vec4Message* Mat4Message::release_w() {
  // @@protoc_insertion_point(field_release:tbMath.Mat4Message.w)
  
  ::tbMath::Vec4Message* temp = w_;
  w_ = nullptr;
  return temp;
}
inline ::tbMath::Vec4Message* Mat4Message::mutable_w() {
  
  if (w_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec4Message>(GetArenaNoVirtual());
    w_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbMath.Mat4Message.w)
  return w_;
}
inline void Mat4Message::set_allocated_w(::tbMath::Vec4Message* w) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete w_;
  }
  if (w) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      w = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, w, submessage_arena);
    }
    
  } else {
    
  }
  w_ = w;
  // @@protoc_insertion_point(field_set_allocated:tbMath.Mat4Message.w)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tbMath

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_math_2eproto
