// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basic.proto

#ifndef PROTOBUF_INCLUDED_basic_2eproto
#define PROTOBUF_INCLUDED_basic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_basic_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_basic_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_basic_2eproto();
namespace tbBasics {
class AnimateActorMessage;
class AnimateActorMessageDefaultTypeInternal;
extern AnimateActorMessageDefaultTypeInternal _AnimateActorMessage_default_instance_;
class ApplyForceMessage;
class ApplyForceMessageDefaultTypeInternal;
extern ApplyForceMessageDefaultTypeInternal _ApplyForceMessage_default_instance_;
class CreateActorMessage;
class CreateActorMessageDefaultTypeInternal;
extern CreateActorMessageDefaultTypeInternal _CreateActorMessage_default_instance_;
class DeleteActorMessage;
class DeleteActorMessageDefaultTypeInternal;
extern DeleteActorMessageDefaultTypeInternal _DeleteActorMessage_default_instance_;
class MoveActorMessage;
class MoveActorMessageDefaultTypeInternal;
extern MoveActorMessageDefaultTypeInternal _MoveActorMessage_default_instance_;
class SetCameraMessage;
class SetCameraMessageDefaultTypeInternal;
extern SetCameraMessageDefaultTypeInternal _SetCameraMessage_default_instance_;
}  // namespace tbBasics
namespace google {
namespace protobuf {
template<> ::tbBasics::AnimateActorMessage* Arena::CreateMaybeMessage<::tbBasics::AnimateActorMessage>(Arena*);
template<> ::tbBasics::ApplyForceMessage* Arena::CreateMaybeMessage<::tbBasics::ApplyForceMessage>(Arena*);
template<> ::tbBasics::CreateActorMessage* Arena::CreateMaybeMessage<::tbBasics::CreateActorMessage>(Arena*);
template<> ::tbBasics::DeleteActorMessage* Arena::CreateMaybeMessage<::tbBasics::DeleteActorMessage>(Arena*);
template<> ::tbBasics::MoveActorMessage* Arena::CreateMaybeMessage<::tbBasics::MoveActorMessage>(Arena*);
template<> ::tbBasics::SetCameraMessage* Arena::CreateMaybeMessage<::tbBasics::SetCameraMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tbBasics {

// ===================================================================

class CreateActorMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.CreateActorMessage) */ {
 public:
  CreateActorMessage();
  virtual ~CreateActorMessage();

  CreateActorMessage(const CreateActorMessage& from);

  inline CreateActorMessage& operator=(const CreateActorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateActorMessage(CreateActorMessage&& from) noexcept
    : CreateActorMessage() {
    *this = ::std::move(from);
  }

  inline CreateActorMessage& operator=(CreateActorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateActorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateActorMessage* internal_default_instance() {
    return reinterpret_cast<const CreateActorMessage*>(
               &_CreateActorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateActorMessage* other);
  friend void swap(CreateActorMessage& a, CreateActorMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateActorMessage* New() const final {
    return CreateMaybeMessage<CreateActorMessage>(nullptr);
  }

  CreateActorMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateActorMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateActorMessage& from);
  void MergeFrom(const CreateActorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateActorMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string entity = 2;
  void clear_entity();
  static const int kEntityFieldNumber = 2;
  const ::std::string& entity() const;
  void set_entity(const ::std::string& value);
  #if LANG_CXX11
  void set_entity(::std::string&& value);
  #endif
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  ::std::string* mutable_entity();
  ::std::string* release_entity();
  void set_allocated_entity(::std::string* entity);

  // string variant = 3;
  void clear_variant();
  static const int kVariantFieldNumber = 3;
  const ::std::string& variant() const;
  void set_variant(const ::std::string& value);
  #if LANG_CXX11
  void set_variant(::std::string&& value);
  #endif
  void set_variant(const char* value);
  void set_variant(const char* value, size_t size);
  ::std::string* mutable_variant();
  ::std::string* release_variant();
  void set_allocated_variant(::std::string* variant);

  // .tbMath.Vec3Message position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  const ::tbMath::Vec3Message& position() const;
  ::tbMath::Vec3Message* release_position();
  ::tbMath::Vec3Message* mutable_position();
  void set_allocated_position(::tbMath::Vec3Message* position);

  // .tbMath.Vec3Message rotation = 5;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  const ::tbMath::Vec3Message& rotation() const;
  ::tbMath::Vec3Message* release_rotation();
  ::tbMath::Vec3Message* mutable_rotation();
  void set_allocated_rotation(::tbMath::Vec3Message* rotation);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.CreateActorMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr entity_;
  ::google::protobuf::internal::ArenaStringPtr variant_;
  ::tbMath::Vec3Message* position_;
  ::tbMath::Vec3Message* rotation_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class DeleteActorMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.DeleteActorMessage) */ {
 public:
  DeleteActorMessage();
  virtual ~DeleteActorMessage();

  DeleteActorMessage(const DeleteActorMessage& from);

  inline DeleteActorMessage& operator=(const DeleteActorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteActorMessage(DeleteActorMessage&& from) noexcept
    : DeleteActorMessage() {
    *this = ::std::move(from);
  }

  inline DeleteActorMessage& operator=(DeleteActorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteActorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteActorMessage* internal_default_instance() {
    return reinterpret_cast<const DeleteActorMessage*>(
               &_DeleteActorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DeleteActorMessage* other);
  friend void swap(DeleteActorMessage& a, DeleteActorMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteActorMessage* New() const final {
    return CreateMaybeMessage<DeleteActorMessage>(nullptr);
  }

  DeleteActorMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteActorMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteActorMessage& from);
  void MergeFrom(const DeleteActorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteActorMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.DeleteActorMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class SetCameraMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.SetCameraMessage) */ {
 public:
  SetCameraMessage();
  virtual ~SetCameraMessage();

  SetCameraMessage(const SetCameraMessage& from);

  inline SetCameraMessage& operator=(const SetCameraMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetCameraMessage(SetCameraMessage&& from) noexcept
    : SetCameraMessage() {
    *this = ::std::move(from);
  }

  inline SetCameraMessage& operator=(SetCameraMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetCameraMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCameraMessage* internal_default_instance() {
    return reinterpret_cast<const SetCameraMessage*>(
               &_SetCameraMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SetCameraMessage* other);
  friend void swap(SetCameraMessage& a, SetCameraMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCameraMessage* New() const final {
    return CreateMaybeMessage<SetCameraMessage>(nullptr);
  }

  SetCameraMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetCameraMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetCameraMessage& from);
  void MergeFrom(const SetCameraMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCameraMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.SetCameraMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class MoveActorMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.MoveActorMessage) */ {
 public:
  MoveActorMessage();
  virtual ~MoveActorMessage();

  MoveActorMessage(const MoveActorMessage& from);

  inline MoveActorMessage& operator=(const MoveActorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveActorMessage(MoveActorMessage&& from) noexcept
    : MoveActorMessage() {
    *this = ::std::move(from);
  }

  inline MoveActorMessage& operator=(MoveActorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MoveActorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveActorMessage* internal_default_instance() {
    return reinterpret_cast<const MoveActorMessage*>(
               &_MoveActorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MoveActorMessage* other);
  friend void swap(MoveActorMessage& a, MoveActorMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveActorMessage* New() const final {
    return CreateMaybeMessage<MoveActorMessage>(nullptr);
  }

  MoveActorMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveActorMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveActorMessage& from);
  void MergeFrom(const MoveActorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveActorMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tbMath.Vec3Message position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::tbMath::Vec3Message& position() const;
  ::tbMath::Vec3Message* release_position();
  ::tbMath::Vec3Message* mutable_position();
  void set_allocated_position(::tbMath::Vec3Message* position);

  // .tbMath.Mat3Message rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  const ::tbMath::Mat3Message& rotation() const;
  ::tbMath::Mat3Message* release_rotation();
  ::tbMath::Mat3Message* mutable_rotation();
  void set_allocated_rotation(::tbMath::Mat3Message* rotation);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.MoveActorMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tbMath::Vec3Message* position_;
  ::tbMath::Mat3Message* rotation_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class AnimateActorMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.AnimateActorMessage) */ {
 public:
  AnimateActorMessage();
  virtual ~AnimateActorMessage();

  AnimateActorMessage(const AnimateActorMessage& from);

  inline AnimateActorMessage& operator=(const AnimateActorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnimateActorMessage(AnimateActorMessage&& from) noexcept
    : AnimateActorMessage() {
    *this = ::std::move(from);
  }

  inline AnimateActorMessage& operator=(AnimateActorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AnimateActorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimateActorMessage* internal_default_instance() {
    return reinterpret_cast<const AnimateActorMessage*>(
               &_AnimateActorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AnimateActorMessage* other);
  friend void swap(AnimateActorMessage& a, AnimateActorMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnimateActorMessage* New() const final {
    return CreateMaybeMessage<AnimateActorMessage>(nullptr);
  }

  AnimateActorMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnimateActorMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnimateActorMessage& from);
  void MergeFrom(const AnimateActorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimateActorMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string animation = 2;
  void clear_animation();
  static const int kAnimationFieldNumber = 2;
  const ::std::string& animation() const;
  void set_animation(const ::std::string& value);
  #if LANG_CXX11
  void set_animation(::std::string&& value);
  #endif
  void set_animation(const char* value);
  void set_animation(const char* value, size_t size);
  ::std::string* mutable_animation();
  ::std::string* release_animation();
  void set_allocated_animation(::std::string* animation);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbBasics.AnimateActorMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr animation_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class ApplyForceMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tbBasics.ApplyForceMessage) */ {
 public:
  ApplyForceMessage();
  virtual ~ApplyForceMessage();

  ApplyForceMessage(const ApplyForceMessage& from);

  inline ApplyForceMessage& operator=(const ApplyForceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApplyForceMessage(ApplyForceMessage&& from) noexcept
    : ApplyForceMessage() {
    *this = ::std::move(from);
  }

  inline ApplyForceMessage& operator=(ApplyForceMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ApplyForceMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyForceMessage* internal_default_instance() {
    return reinterpret_cast<const ApplyForceMessage*>(
               &_ApplyForceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ApplyForceMessage* other);
  friend void swap(ApplyForceMessage& a, ApplyForceMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApplyForceMessage* New() const final {
    return CreateMaybeMessage<ApplyForceMessage>(nullptr);
  }

  ApplyForceMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ApplyForceMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ApplyForceMessage& from);
  void MergeFrom(const ApplyForceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyForceMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tbMath.Vec3Message direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  const ::tbMath::Vec3Message& direction() const;
  ::tbMath::Vec3Message* release_direction();
  ::tbMath::Vec3Message* mutable_direction();
  void set_allocated_direction(::tbMath::Vec3Message* direction);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // float magnitude = 2;
  void clear_magnitude();
  static const int kMagnitudeFieldNumber = 2;
  float magnitude() const;
  void set_magnitude(float value);

  // @@protoc_insertion_point(class_scope:tbBasics.ApplyForceMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tbMath::Vec3Message* direction_;
  ::google::protobuf::uint32 id_;
  float magnitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateActorMessage

// uint32 id = 1;
inline void CreateActorMessage::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CreateActorMessage::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorMessage.id)
  return id_;
}
inline void CreateActorMessage::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.CreateActorMessage.id)
}

// string entity = 2;
inline void CreateActorMessage::clear_entity() {
  entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateActorMessage::entity() const {
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorMessage.entity)
  return entity_.GetNoArena();
}
inline void CreateActorMessage::set_entity(const ::std::string& value) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tbBasics.CreateActorMessage.entity)
}
#if LANG_CXX11
inline void CreateActorMessage::set_entity(::std::string&& value) {
  
  entity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tbBasics.CreateActorMessage.entity)
}
#endif
inline void CreateActorMessage::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tbBasics.CreateActorMessage.entity)
}
inline void CreateActorMessage::set_entity(const char* value, size_t size) {
  
  entity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tbBasics.CreateActorMessage.entity)
}
inline ::std::string* CreateActorMessage::mutable_entity() {
  
  // @@protoc_insertion_point(field_mutable:tbBasics.CreateActorMessage.entity)
  return entity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateActorMessage::release_entity() {
  // @@protoc_insertion_point(field_release:tbBasics.CreateActorMessage.entity)
  
  return entity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActorMessage::set_allocated_entity(::std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:tbBasics.CreateActorMessage.entity)
}

// string variant = 3;
inline void CreateActorMessage::clear_variant() {
  variant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateActorMessage::variant() const {
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorMessage.variant)
  return variant_.GetNoArena();
}
inline void CreateActorMessage::set_variant(const ::std::string& value) {
  
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tbBasics.CreateActorMessage.variant)
}
#if LANG_CXX11
inline void CreateActorMessage::set_variant(::std::string&& value) {
  
  variant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tbBasics.CreateActorMessage.variant)
}
#endif
inline void CreateActorMessage::set_variant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tbBasics.CreateActorMessage.variant)
}
inline void CreateActorMessage::set_variant(const char* value, size_t size) {
  
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tbBasics.CreateActorMessage.variant)
}
inline ::std::string* CreateActorMessage::mutable_variant() {
  
  // @@protoc_insertion_point(field_mutable:tbBasics.CreateActorMessage.variant)
  return variant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateActorMessage::release_variant() {
  // @@protoc_insertion_point(field_release:tbBasics.CreateActorMessage.variant)
  
  return variant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateActorMessage::set_allocated_variant(::std::string* variant) {
  if (variant != nullptr) {
    
  } else {
    
  }
  variant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant);
  // @@protoc_insertion_point(field_set_allocated:tbBasics.CreateActorMessage.variant)
}

// .tbMath.Vec3Message position = 4;
inline bool CreateActorMessage::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::tbMath::Vec3Message& CreateActorMessage::position() const {
  const ::tbMath::Vec3Message* p = position_;
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorMessage.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* CreateActorMessage::release_position() {
  // @@protoc_insertion_point(field_release:tbBasics.CreateActorMessage.position)
  
  ::tbMath::Vec3Message* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* CreateActorMessage::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.CreateActorMessage.position)
  return position_;
}
inline void CreateActorMessage::set_allocated_position(::tbMath::Vec3Message* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.CreateActorMessage.position)
}

// .tbMath.Vec3Message rotation = 5;
inline bool CreateActorMessage::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::tbMath::Vec3Message& CreateActorMessage::rotation() const {
  const ::tbMath::Vec3Message* p = rotation_;
  // @@protoc_insertion_point(field_get:tbBasics.CreateActorMessage.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* CreateActorMessage::release_rotation() {
  // @@protoc_insertion_point(field_release:tbBasics.CreateActorMessage.rotation)
  
  ::tbMath::Vec3Message* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* CreateActorMessage::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.CreateActorMessage.rotation)
  return rotation_;
}
inline void CreateActorMessage::set_allocated_rotation(::tbMath::Vec3Message* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.CreateActorMessage.rotation)
}

// -------------------------------------------------------------------

// DeleteActorMessage

// uint32 id = 1;
inline void DeleteActorMessage::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 DeleteActorMessage::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.DeleteActorMessage.id)
  return id_;
}
inline void DeleteActorMessage::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.DeleteActorMessage.id)
}

// -------------------------------------------------------------------

// SetCameraMessage

// uint32 id = 1;
inline void SetCameraMessage::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SetCameraMessage::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.SetCameraMessage.id)
  return id_;
}
inline void SetCameraMessage::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.SetCameraMessage.id)
}

// string name = 2;
inline void SetCameraMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetCameraMessage::name() const {
  // @@protoc_insertion_point(field_get:tbBasics.SetCameraMessage.name)
  return name_.GetNoArena();
}
inline void SetCameraMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tbBasics.SetCameraMessage.name)
}
#if LANG_CXX11
inline void SetCameraMessage::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tbBasics.SetCameraMessage.name)
}
#endif
inline void SetCameraMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tbBasics.SetCameraMessage.name)
}
inline void SetCameraMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tbBasics.SetCameraMessage.name)
}
inline ::std::string* SetCameraMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tbBasics.SetCameraMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetCameraMessage::release_name() {
  // @@protoc_insertion_point(field_release:tbBasics.SetCameraMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetCameraMessage::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tbBasics.SetCameraMessage.name)
}

// -------------------------------------------------------------------

// MoveActorMessage

// uint32 id = 1;
inline void MoveActorMessage::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MoveActorMessage::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.MoveActorMessage.id)
  return id_;
}
inline void MoveActorMessage::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.MoveActorMessage.id)
}

// .tbMath.Vec3Message position = 2;
inline bool MoveActorMessage::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::tbMath::Vec3Message& MoveActorMessage::position() const {
  const ::tbMath::Vec3Message* p = position_;
  // @@protoc_insertion_point(field_get:tbBasics.MoveActorMessage.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* MoveActorMessage::release_position() {
  // @@protoc_insertion_point(field_release:tbBasics.MoveActorMessage.position)
  
  ::tbMath::Vec3Message* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* MoveActorMessage::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.MoveActorMessage.position)
  return position_;
}
inline void MoveActorMessage::set_allocated_position(::tbMath::Vec3Message* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.MoveActorMessage.position)
}

// .tbMath.Mat3Message rotation = 3;
inline bool MoveActorMessage::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::tbMath::Mat3Message& MoveActorMessage::rotation() const {
  const ::tbMath::Mat3Message* p = rotation_;
  // @@protoc_insertion_point(field_get:tbBasics.MoveActorMessage.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Mat3Message*>(
      &::tbMath::_Mat3Message_default_instance_);
}
inline ::tbMath::Mat3Message* MoveActorMessage::release_rotation() {
  // @@protoc_insertion_point(field_release:tbBasics.MoveActorMessage.rotation)
  
  ::tbMath::Mat3Message* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::tbMath::Mat3Message* MoveActorMessage::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Mat3Message>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.MoveActorMessage.rotation)
  return rotation_;
}
inline void MoveActorMessage::set_allocated_rotation(::tbMath::Mat3Message* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.MoveActorMessage.rotation)
}

// -------------------------------------------------------------------

// AnimateActorMessage

// uint32 id = 1;
inline void AnimateActorMessage::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 AnimateActorMessage::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.AnimateActorMessage.id)
  return id_;
}
inline void AnimateActorMessage::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.AnimateActorMessage.id)
}

// string animation = 2;
inline void AnimateActorMessage::clear_animation() {
  animation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnimateActorMessage::animation() const {
  // @@protoc_insertion_point(field_get:tbBasics.AnimateActorMessage.animation)
  return animation_.GetNoArena();
}
inline void AnimateActorMessage::set_animation(const ::std::string& value) {
  
  animation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tbBasics.AnimateActorMessage.animation)
}
#if LANG_CXX11
inline void AnimateActorMessage::set_animation(::std::string&& value) {
  
  animation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tbBasics.AnimateActorMessage.animation)
}
#endif
inline void AnimateActorMessage::set_animation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  animation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tbBasics.AnimateActorMessage.animation)
}
inline void AnimateActorMessage::set_animation(const char* value, size_t size) {
  
  animation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tbBasics.AnimateActorMessage.animation)
}
inline ::std::string* AnimateActorMessage::mutable_animation() {
  
  // @@protoc_insertion_point(field_mutable:tbBasics.AnimateActorMessage.animation)
  return animation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnimateActorMessage::release_animation() {
  // @@protoc_insertion_point(field_release:tbBasics.AnimateActorMessage.animation)
  
  return animation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnimateActorMessage::set_allocated_animation(::std::string* animation) {
  if (animation != nullptr) {
    
  } else {
    
  }
  animation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), animation);
  // @@protoc_insertion_point(field_set_allocated:tbBasics.AnimateActorMessage.animation)
}

// -------------------------------------------------------------------

// ApplyForceMessage

// uint32 id = 1;
inline void ApplyForceMessage::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ApplyForceMessage::id() const {
  // @@protoc_insertion_point(field_get:tbBasics.ApplyForceMessage.id)
  return id_;
}
inline void ApplyForceMessage::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.ApplyForceMessage.id)
}

// float magnitude = 2;
inline void ApplyForceMessage::clear_magnitude() {
  magnitude_ = 0;
}
inline float ApplyForceMessage::magnitude() const {
  // @@protoc_insertion_point(field_get:tbBasics.ApplyForceMessage.magnitude)
  return magnitude_;
}
inline void ApplyForceMessage::set_magnitude(float value) {
  
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:tbBasics.ApplyForceMessage.magnitude)
}

// .tbMath.Vec3Message direction = 3;
inline bool ApplyForceMessage::has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline const ::tbMath::Vec3Message& ApplyForceMessage::direction() const {
  const ::tbMath::Vec3Message* p = direction_;
  // @@protoc_insertion_point(field_get:tbBasics.ApplyForceMessage.direction)
  return p != nullptr ? *p : *reinterpret_cast<const ::tbMath::Vec3Message*>(
      &::tbMath::_Vec3Message_default_instance_);
}
inline ::tbMath::Vec3Message* ApplyForceMessage::release_direction() {
  // @@protoc_insertion_point(field_release:tbBasics.ApplyForceMessage.direction)
  
  ::tbMath::Vec3Message* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::tbMath::Vec3Message* ApplyForceMessage::mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::tbMath::Vec3Message>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tbBasics.ApplyForceMessage.direction)
  return direction_;
}
inline void ApplyForceMessage::set_allocated_direction(::tbMath::Vec3Message* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:tbBasics.ApplyForceMessage.direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tbBasics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_basic_2eproto
