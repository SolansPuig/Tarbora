// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto

#include "messages.pb.h"
#include "messages.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tbMessages {

static const char* TarboraMessages_method_names[] = {
  "/tbMessages.TarboraMessages/Connect",
  "/tbMessages.TarboraMessages/Subscribe",
  "/tbMessages.TarboraMessages/Desubscribe",
};

std::unique_ptr< TarboraMessages::Stub> TarboraMessages::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TarboraMessages::Stub> stub(new TarboraMessages::Stub(channel));
  return stub;
}

TarboraMessages::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Connect_(TarboraMessages_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Subscribe_(TarboraMessages_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Desubscribe_(TarboraMessages_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* TarboraMessages::Stub::ConnectRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::tbMessages::Message, ::tbMessages::Message>::Create(channel_.get(), rpcmethod_Connect_, context);
}

void TarboraMessages::Stub::experimental_async::Connect(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::tbMessages::Message,::tbMessages::Message>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::tbMessages::Message,::tbMessages::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* TarboraMessages::Stub::AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tbMessages::Message, ::tbMessages::Message>::Create(channel_.get(), cq, rpcmethod_Connect_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* TarboraMessages::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tbMessages::Message, ::tbMessages::Message>::Create(channel_.get(), cq, rpcmethod_Connect_, context, false, nullptr);
}

::grpc::Status TarboraMessages::Stub::Subscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::tbMessages::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Subscribe_, context, request, response);
}

void TarboraMessages::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, response, std::move(f));
}

void TarboraMessages::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, response, std::move(f));
}

void TarboraMessages::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, response, reactor);
}

void TarboraMessages::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>* TarboraMessages::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tbMessages::Empty>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>* TarboraMessages::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tbMessages::Empty>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false);
}

::grpc::Status TarboraMessages::Stub::Desubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::tbMessages::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Desubscribe_, context, request, response);
}

void TarboraMessages::Stub::experimental_async::Desubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Desubscribe_, context, request, response, std::move(f));
}

void TarboraMessages::Stub::experimental_async::Desubscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Desubscribe_, context, request, response, std::move(f));
}

void TarboraMessages::Stub::experimental_async::Desubscribe(::grpc::ClientContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Desubscribe_, context, request, response, reactor);
}

void TarboraMessages::Stub::experimental_async::Desubscribe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tbMessages::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Desubscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>* TarboraMessages::Stub::AsyncDesubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tbMessages::Empty>::Create(channel_.get(), cq, rpcmethod_Desubscribe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tbMessages::Empty>* TarboraMessages::Stub::PrepareAsyncDesubscribeRaw(::grpc::ClientContext* context, const ::tbMessages::EventHeader& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tbMessages::Empty>::Create(channel_.get(), cq, rpcmethod_Desubscribe_, context, request, false);
}

TarboraMessages::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TarboraMessages_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TarboraMessages::Service, ::tbMessages::Message, ::tbMessages::Message>(
          std::mem_fn(&TarboraMessages::Service::Connect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TarboraMessages_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TarboraMessages::Service, ::tbMessages::EventHeader, ::tbMessages::Empty>(
          std::mem_fn(&TarboraMessages::Service::Subscribe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TarboraMessages_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TarboraMessages::Service, ::tbMessages::EventHeader, ::tbMessages::Empty>(
          std::mem_fn(&TarboraMessages::Service::Desubscribe), this)));
}

TarboraMessages::Service::~Service() {
}

::grpc::Status TarboraMessages::Service::Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tbMessages::Message, ::tbMessages::Message>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TarboraMessages::Service::Subscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TarboraMessages::Service::Desubscribe(::grpc::ServerContext* context, const ::tbMessages::EventHeader* request, ::tbMessages::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tbMessages

